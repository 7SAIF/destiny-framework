# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ForumApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def forum_approve_fireteam_thread(self, topic_id, **kwargs):  # noqa: E501
        """forum_approve_fireteam_thread  # noqa: E501

        Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_approve_fireteam_thread(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the recruitment topic to approve. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_approve_fireteam_thread_with_http_info(topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_approve_fireteam_thread_with_http_info(topic_id, **kwargs)  # noqa: E501
            return data

    def forum_approve_fireteam_thread_with_http_info(self, topic_id, **kwargs):  # noqa: E501
        """forum_approve_fireteam_thread  # noqa: E501

        Allows the owner of a fireteam thread to approve all joined members and start a private message conversation with them.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_approve_fireteam_thread_with_http_info(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the recruitment topic to approve. (required)
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_approve_fireteam_thread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_id' is set
        if ('topic_id' not in params or
                params['topic_id'] is None):
            raise ValueError("Missing the required parameter `topic_id` when calling `forum_approve_fireteam_thread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in params:
            path_params['topicId'] = params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Recruit/Approve/{topicId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_core_topics_paged(self, category_filter, page, quick_date, sort, **kwargs):  # noqa: E501
        """forum_get_core_topics_paged  # noqa: E501

        Gets a listing of all topics marked as part of the core group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_core_topics_paged(category_filter, page, quick_date, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int category_filter: The category filter. (required)
        :param int page: Zero base page (required)
        :param int quick_date: The date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_core_topics_paged_with_http_info(category_filter, page, quick_date, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_core_topics_paged_with_http_info(category_filter, page, quick_date, sort, **kwargs)  # noqa: E501
            return data

    def forum_get_core_topics_paged_with_http_info(self, category_filter, page, quick_date, sort, **kwargs):  # noqa: E501
        """forum_get_core_topics_paged  # noqa: E501

        Gets a listing of all topics marked as part of the core group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_core_topics_paged_with_http_info(category_filter, page, quick_date, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int category_filter: The category filter. (required)
        :param int page: Zero base page (required)
        :param int quick_date: The date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_filter', 'page', 'quick_date', 'sort', 'locales']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_core_topics_paged" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_filter' is set
        if ('category_filter' not in params or
                params['category_filter'] is None):
            raise ValueError("Missing the required parameter `category_filter` when calling `forum_get_core_topics_paged`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `forum_get_core_topics_paged`")  # noqa: E501
        # verify the required parameter 'quick_date' is set
        if ('quick_date' not in params or
                params['quick_date'] is None):
            raise ValueError("Missing the required parameter `quick_date` when calling `forum_get_core_topics_paged`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in params or
                params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `forum_get_core_topics_paged`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_filter' in params:
            path_params['categoryFilter'] = params['category_filter']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'quick_date' in params:
            path_params['quickDate'] = params['quick_date']  # noqa: E501
        if 'sort' in params:
            path_params['sort'] = params['sort']  # noqa: E501

        query_params = []
        if 'locales' in params:
            query_params.append(('locales', params['locales']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_forum_tag_suggestions(self, **kwargs):  # noqa: E501
        """forum_get_forum_tag_suggestions  # noqa: E501

        Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_forum_tag_suggestions(async=True)
        >>> result = thread.get()

        :param async bool
        :param str partialtag: The partial tag input to generate suggestions from.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_forum_tag_suggestions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_forum_tag_suggestions_with_http_info(**kwargs)  # noqa: E501
            return data

    def forum_get_forum_tag_suggestions_with_http_info(self, **kwargs):  # noqa: E501
        """forum_get_forum_tag_suggestions  # noqa: E501

        Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_forum_tag_suggestions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str partialtag: The partial tag input to generate suggestions from.
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['partialtag']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_forum_tag_suggestions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'partialtag' in params:
            query_params.append(('partialtag', params['partialtag']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetForumTagSuggestions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_poll(self, topic_id, **kwargs):  # noqa: E501
        """forum_get_poll  # noqa: E501

        Gets the specified forum poll.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_poll(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the topic that has the poll. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_poll_with_http_info(topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_poll_with_http_info(topic_id, **kwargs)  # noqa: E501
            return data

    def forum_get_poll_with_http_info(self, topic_id, **kwargs):  # noqa: E501
        """forum_get_poll  # noqa: E501

        Gets the specified forum poll.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_poll_with_http_info(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the topic that has the poll. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_poll" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_id' is set
        if ('topic_id' not in params or
                params['topic_id'] is None):
            raise ValueError("Missing the required parameter `topic_id` when calling `forum_get_poll`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in params:
            path_params['topicId'] = params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Poll/{topicId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_post_and_parent(self, child_post_id, **kwargs):  # noqa: E501
        """forum_get_post_and_parent  # noqa: E501

        Returns the post specified and its immediate parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_post_and_parent(child_post_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int child_post_id:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_post_and_parent_with_http_info(child_post_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_post_and_parent_with_http_info(child_post_id, **kwargs)  # noqa: E501
            return data

    def forum_get_post_and_parent_with_http_info(self, child_post_id, **kwargs):  # noqa: E501
        """forum_get_post_and_parent  # noqa: E501

        Returns the post specified and its immediate parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_post_and_parent_with_http_info(child_post_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int child_post_id:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_post_id', 'showbanned']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_post_and_parent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_post_id' is set
        if ('child_post_id' not in params or
                params['child_post_id'] is None):
            raise ValueError("Missing the required parameter `child_post_id` when calling `forum_get_post_and_parent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'child_post_id' in params:
            path_params['childPostId'] = params['child_post_id']  # noqa: E501

        query_params = []
        if 'showbanned' in params:
            query_params.append(('showbanned', params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostAndParent/{childPostId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_post_and_parent_awaiting_approval(self, child_post_id, **kwargs):  # noqa: E501
        """forum_get_post_and_parent_awaiting_approval  # noqa: E501

        Returns the post specified and its immediate parent of posts that are awaiting approval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_post_and_parent_awaiting_approval(child_post_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int child_post_id:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_post_and_parent_awaiting_approval_with_http_info(child_post_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_post_and_parent_awaiting_approval_with_http_info(child_post_id, **kwargs)  # noqa: E501
            return data

    def forum_get_post_and_parent_awaiting_approval_with_http_info(self, child_post_id, **kwargs):  # noqa: E501
        """forum_get_post_and_parent_awaiting_approval  # noqa: E501

        Returns the post specified and its immediate parent of posts that are awaiting approval.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_post_and_parent_awaiting_approval_with_http_info(child_post_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int child_post_id:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_post_id', 'showbanned']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_post_and_parent_awaiting_approval" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_post_id' is set
        if ('child_post_id' not in params or
                params['child_post_id'] is None):
            raise ValueError("Missing the required parameter `child_post_id` when calling `forum_get_post_and_parent_awaiting_approval`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'child_post_id' in params:
            path_params['childPostId'] = params['child_post_id']  # noqa: E501

        query_params = []
        if 'showbanned' in params:
            query_params.append(('showbanned', params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostAndParentAwaitingApproval/{childPostId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_posts_threaded_paged(self, get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """forum_get_posts_threaded_paged  # noqa: E501

        Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_posts_threaded_paged(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, async=True)
        >>> result = thread.get()

        :param async bool
        :param bool get_parent_post:  (required)
        :param int page:  (required)
        :param int page_size:  (required)
        :param int parent_post_id:  (required)
        :param int reply_size:  (required)
        :param bool root_thread_mode:  (required)
        :param int sort_mode:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_posts_threaded_paged_with_http_info(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_posts_threaded_paged_with_http_info(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
            return data

    def forum_get_posts_threaded_paged_with_http_info(self, get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """forum_get_posts_threaded_paged  # noqa: E501

        Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_posts_threaded_paged_with_http_info(get_parent_post, page, page_size, parent_post_id, reply_size, root_thread_mode, sort_mode, async=True)
        >>> result = thread.get()

        :param async bool
        :param bool get_parent_post:  (required)
        :param int page:  (required)
        :param int page_size:  (required)
        :param int parent_post_id:  (required)
        :param int reply_size:  (required)
        :param bool root_thread_mode:  (required)
        :param int sort_mode:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['get_parent_post', 'page', 'page_size', 'parent_post_id', 'reply_size', 'root_thread_mode', 'sort_mode', 'showbanned']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_posts_threaded_paged" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'get_parent_post' is set
        if ('get_parent_post' not in params or
                params['get_parent_post'] is None):
            raise ValueError("Missing the required parameter `get_parent_post` when calling `forum_get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `forum_get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `forum_get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'parent_post_id' is set
        if ('parent_post_id' not in params or
                params['parent_post_id'] is None):
            raise ValueError("Missing the required parameter `parent_post_id` when calling `forum_get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'reply_size' is set
        if ('reply_size' not in params or
                params['reply_size'] is None):
            raise ValueError("Missing the required parameter `reply_size` when calling `forum_get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'root_thread_mode' is set
        if ('root_thread_mode' not in params or
                params['root_thread_mode'] is None):
            raise ValueError("Missing the required parameter `root_thread_mode` when calling `forum_get_posts_threaded_paged`")  # noqa: E501
        # verify the required parameter 'sort_mode' is set
        if ('sort_mode' not in params or
                params['sort_mode'] is None):
            raise ValueError("Missing the required parameter `sort_mode` when calling `forum_get_posts_threaded_paged`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'get_parent_post' in params:
            path_params['getParentPost'] = params['get_parent_post']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'page_size' in params:
            path_params['pageSize'] = params['page_size']  # noqa: E501
        if 'parent_post_id' in params:
            path_params['parentPostId'] = params['parent_post_id']  # noqa: E501
        if 'reply_size' in params:
            path_params['replySize'] = params['reply_size']  # noqa: E501
        if 'root_thread_mode' in params:
            path_params['rootThreadMode'] = params['root_thread_mode']  # noqa: E501
        if 'sort_mode' in params:
            path_params['sortMode'] = params['sort_mode']  # noqa: E501

        query_params = []
        if 'showbanned' in params:
            query_params.append(('showbanned', params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_posts_threaded_paged_from_child(self, child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """forum_get_posts_threaded_paged_from_child  # noqa: E501

        Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_posts_threaded_paged_from_child(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, async=True)
        >>> result = thread.get()

        :param async bool
        :param int child_post_id:  (required)
        :param int page:  (required)
        :param int page_size:  (required)
        :param int reply_size:  (required)
        :param bool root_thread_mode:  (required)
        :param int sort_mode:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_posts_threaded_paged_from_child_with_http_info(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_posts_threaded_paged_from_child_with_http_info(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs)  # noqa: E501
            return data

    def forum_get_posts_threaded_paged_from_child_with_http_info(self, child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, **kwargs):  # noqa: E501
        """forum_get_posts_threaded_paged_from_child  # noqa: E501

        Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_posts_threaded_paged_from_child_with_http_info(child_post_id, page, page_size, reply_size, root_thread_mode, sort_mode, async=True)
        >>> result = thread.get()

        :param async bool
        :param int child_post_id:  (required)
        :param int page:  (required)
        :param int page_size:  (required)
        :param int reply_size:  (required)
        :param bool root_thread_mode:  (required)
        :param int sort_mode:  (required)
        :param str showbanned: If this value is not null or empty, banned posts are requested to be returned
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['child_post_id', 'page', 'page_size', 'reply_size', 'root_thread_mode', 'sort_mode', 'showbanned']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_posts_threaded_paged_from_child" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'child_post_id' is set
        if ('child_post_id' not in params or
                params['child_post_id'] is None):
            raise ValueError("Missing the required parameter `child_post_id` when calling `forum_get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `forum_get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `forum_get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'reply_size' is set
        if ('reply_size' not in params or
                params['reply_size'] is None):
            raise ValueError("Missing the required parameter `reply_size` when calling `forum_get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'root_thread_mode' is set
        if ('root_thread_mode' not in params or
                params['root_thread_mode'] is None):
            raise ValueError("Missing the required parameter `root_thread_mode` when calling `forum_get_posts_threaded_paged_from_child`")  # noqa: E501
        # verify the required parameter 'sort_mode' is set
        if ('sort_mode' not in params or
                params['sort_mode'] is None):
            raise ValueError("Missing the required parameter `sort_mode` when calling `forum_get_posts_threaded_paged_from_child`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'child_post_id' in params:
            path_params['childPostId'] = params['child_post_id']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'page_size' in params:
            path_params['pageSize'] = params['page_size']  # noqa: E501
        if 'reply_size' in params:
            path_params['replySize'] = params['reply_size']  # noqa: E501
        if 'root_thread_mode' in params:
            path_params['rootThreadMode'] = params['root_thread_mode']  # noqa: E501
        if 'sort_mode' in params:
            path_params['sortMode'] = params['sort_mode']  # noqa: E501

        query_params = []
        if 'showbanned' in params:
            query_params.append(('showbanned', params['showbanned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_recruitment_thread_summaries(self, **kwargs):  # noqa: E501
        """forum_get_recruitment_thread_summaries  # noqa: E501

        Allows the caller to get a list of to 25 recruitment thread summary information objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_recruitment_thread_summaries(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_recruitment_thread_summaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_recruitment_thread_summaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def forum_get_recruitment_thread_summaries_with_http_info(self, **kwargs):  # noqa: E501
        """forum_get_recruitment_thread_summaries  # noqa: E501

        Allows the caller to get a list of to 25 recruitment thread summary information objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_recruitment_thread_summaries_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_recruitment_thread_summaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Recruit/Summaries/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_topic_for_content(self, content_id, **kwargs):  # noqa: E501
        """forum_get_topic_for_content  # noqa: E501

        Gets the post Id for the given content item's comments, if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_topic_for_content(content_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_id:  (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_topic_for_content_with_http_info(content_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_topic_for_content_with_http_info(content_id, **kwargs)  # noqa: E501
            return data

    def forum_get_topic_for_content_with_http_info(self, content_id, **kwargs):  # noqa: E501
        """forum_get_topic_for_content  # noqa: E501

        Gets the post Id for the given content item's comments, if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_topic_for_content_with_http_info(content_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int content_id:  (required)
        :return: InlineResponse2007
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['content_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_topic_for_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'content_id' is set
        if ('content_id' not in params or
                params['content_id'] is None):
            raise ValueError("Missing the required parameter `content_id` when calling `forum_get_topic_for_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'content_id' in params:
            path_params['contentId'] = params['content_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetTopicForContent/{contentId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2007',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_get_topics_paged(self, category_filter, group, page, page_size, quick_date, sort, **kwargs):  # noqa: E501
        """forum_get_topics_paged  # noqa: E501

        Get topics from any forum.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_topics_paged(category_filter, group, page, page_size, quick_date, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int category_filter: A category filter (required)
        :param int group: The group, if any. (required)
        :param int page: Zero paged page number (required)
        :param int page_size: Unused (required)
        :param int quick_date: A date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :param str tagstring: The tags to search, if any.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_get_topics_paged_with_http_info(category_filter, group, page, page_size, quick_date, sort, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_get_topics_paged_with_http_info(category_filter, group, page, page_size, quick_date, sort, **kwargs)  # noqa: E501
            return data

    def forum_get_topics_paged_with_http_info(self, category_filter, group, page, page_size, quick_date, sort, **kwargs):  # noqa: E501
        """forum_get_topics_paged  # noqa: E501

        Get topics from any forum.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_get_topics_paged_with_http_info(category_filter, group, page, page_size, quick_date, sort, async=True)
        >>> result = thread.get()

        :param async bool
        :param int category_filter: A category filter (required)
        :param int group: The group, if any. (required)
        :param int page: Zero paged page number (required)
        :param int page_size: Unused (required)
        :param int quick_date: A date filter. (required)
        :param int sort: The sort mode. (required)
        :param str locales: Comma seperated list of locales posts must match to return in the result list. Default 'en'
        :param str tagstring: The tags to search, if any.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_filter', 'group', 'page', 'page_size', 'quick_date', 'sort', 'locales', 'tagstring']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_get_topics_paged" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_filter' is set
        if ('category_filter' not in params or
                params['category_filter'] is None):
            raise ValueError("Missing the required parameter `category_filter` when calling `forum_get_topics_paged`")  # noqa: E501
        # verify the required parameter 'group' is set
        if ('group' not in params or
                params['group'] is None):
            raise ValueError("Missing the required parameter `group` when calling `forum_get_topics_paged`")  # noqa: E501
        # verify the required parameter 'page' is set
        if ('page' not in params or
                params['page'] is None):
            raise ValueError("Missing the required parameter `page` when calling `forum_get_topics_paged`")  # noqa: E501
        # verify the required parameter 'page_size' is set
        if ('page_size' not in params or
                params['page_size'] is None):
            raise ValueError("Missing the required parameter `page_size` when calling `forum_get_topics_paged`")  # noqa: E501
        # verify the required parameter 'quick_date' is set
        if ('quick_date' not in params or
                params['quick_date'] is None):
            raise ValueError("Missing the required parameter `quick_date` when calling `forum_get_topics_paged`")  # noqa: E501
        # verify the required parameter 'sort' is set
        if ('sort' not in params or
                params['sort'] is None):
            raise ValueError("Missing the required parameter `sort` when calling `forum_get_topics_paged`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'category_filter' in params:
            path_params['categoryFilter'] = params['category_filter']  # noqa: E501
        if 'group' in params:
            path_params['group'] = params['group']  # noqa: E501
        if 'page' in params:
            path_params['page'] = params['page']  # noqa: E501
        if 'page_size' in params:
            path_params['pageSize'] = params['page_size']  # noqa: E501
        if 'quick_date' in params:
            path_params['quickDate'] = params['quick_date']  # noqa: E501
        if 'sort' in params:
            path_params['sort'] = params['sort']  # noqa: E501

        query_params = []
        if 'locales' in params:
            query_params.append(('locales', params['locales']))  # noqa: E501
        if 'tagstring' in params:
            query_params.append(('tagstring', params['tagstring']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_join_fireteam_thread(self, topic_id, **kwargs):  # noqa: E501
        """forum_join_fireteam_thread  # noqa: E501

        Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_join_fireteam_thread(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the recruitment topic you wish to join. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_join_fireteam_thread_with_http_info(topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_join_fireteam_thread_with_http_info(topic_id, **kwargs)  # noqa: E501
            return data

    def forum_join_fireteam_thread_with_http_info(self, topic_id, **kwargs):  # noqa: E501
        """forum_join_fireteam_thread  # noqa: E501

        Allows a user to slot themselves into a recruitment thread fireteam slot. Returns the new state of the fireteam.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_join_fireteam_thread_with_http_info(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the recruitment topic you wish to join. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_join_fireteam_thread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_id' is set
        if ('topic_id' not in params or
                params['topic_id'] is None):
            raise ValueError("Missing the required parameter `topic_id` when calling `forum_join_fireteam_thread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in params:
            path_params['topicId'] = params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Recruit/Join/{topicId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_kick_ban_fireteam_applicant(self, target_membership_id, topic_id, **kwargs):  # noqa: E501
        """forum_kick_ban_fireteam_applicant  # noqa: E501

        Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_kick_ban_fireteam_applicant(target_membership_id, topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int target_membership_id: The id of the user you wish to kick. (required)
        :param int topic_id: The post id of the recruitment topic you wish to join. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_kick_ban_fireteam_applicant_with_http_info(target_membership_id, topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_kick_ban_fireteam_applicant_with_http_info(target_membership_id, topic_id, **kwargs)  # noqa: E501
            return data

    def forum_kick_ban_fireteam_applicant_with_http_info(self, target_membership_id, topic_id, **kwargs):  # noqa: E501
        """forum_kick_ban_fireteam_applicant  # noqa: E501

        Allows a recruitment thread owner to kick a join user from the fireteam. Returns the new state of the fireteam.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_kick_ban_fireteam_applicant_with_http_info(target_membership_id, topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int target_membership_id: The id of the user you wish to kick. (required)
        :param int topic_id: The post id of the recruitment topic you wish to join. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_membership_id', 'topic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_kick_ban_fireteam_applicant" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_membership_id' is set
        if ('target_membership_id' not in params or
                params['target_membership_id'] is None):
            raise ValueError("Missing the required parameter `target_membership_id` when calling `forum_kick_ban_fireteam_applicant`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if ('topic_id' not in params or
                params['topic_id'] is None):
            raise ValueError("Missing the required parameter `topic_id` when calling `forum_kick_ban_fireteam_applicant`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_membership_id' in params:
            path_params['targetMembershipId'] = params['target_membership_id']  # noqa: E501
        if 'topic_id' in params:
            path_params['topicId'] = params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Recruit/KickBan/{topicId}/{targetMembershipId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def forum_leave_fireteam_thread(self, topic_id, **kwargs):  # noqa: E501
        """forum_leave_fireteam_thread  # noqa: E501

        Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_leave_fireteam_thread(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the recruitment topic you wish to leave. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.forum_leave_fireteam_thread_with_http_info(topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.forum_leave_fireteam_thread_with_http_info(topic_id, **kwargs)  # noqa: E501
            return data

    def forum_leave_fireteam_thread_with_http_info(self, topic_id, **kwargs):  # noqa: E501
        """forum_leave_fireteam_thread  # noqa: E501

        Allows a user to remove themselves from a recruitment thread fireteam slot. Returns the new state of the fireteam.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.forum_leave_fireteam_thread_with_http_info(topic_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int topic_id: The post id of the recruitment topic you wish to leave. (required)
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topic_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method forum_leave_fireteam_thread" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topic_id' is set
        if ('topic_id' not in params or
                params['topic_id'] is None):
            raise ValueError("Missing the required parameter `topic_id` when calling `forum_leave_fireteam_thread`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'topic_id' in params:
            path_params['topicId'] = params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Forum/Recruit/Leave/{topicId}/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
