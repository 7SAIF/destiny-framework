# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class Destiny2Api(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def destiny2_activate_talent_node(self, **kwargs):  # noqa: E501
        """destiny2_activate_talent_node  # noqa: E501

        Activate a Talent Node. Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_activate_talent_node(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_activate_talent_node_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_activate_talent_node_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_activate_talent_node_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_activate_talent_node  # noqa: E501

        Activate a Talent Node. Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_activate_talent_node_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_activate_talent_node" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/ActivateTalentNode/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_equip_item(self, **kwargs):  # noqa: E501
        """destiny2_equip_item  # noqa: E501

        Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_item(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_equip_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_equip_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_equip_item_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_equip_item  # noqa: E501

        Equip an item. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_item_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_equip_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/EquipItem/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_equip_items(self, **kwargs):  # noqa: E501
        """destiny2_equip_items  # noqa: E501

        Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_items(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_equip_items_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_equip_items_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_equip_items_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_equip_items  # noqa: E501

        Equip a list of items by itemInstanceIds. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. Any items not found on your character will be ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_equip_items_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_equip_items" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/EquipItems/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_activity_history(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_activity_history  # noqa: E501

        Gets activity history stats for indicated character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_activity_history(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int count: Number of rows to return
        :param int mode: A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_activity_history_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_activity_history  # noqa: E501

        Gets activity history stats for indicated character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int count: Number of rows to return
        :param int mode: A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'count', 'mode', 'page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_activity_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_activity_history`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_activity_history`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_activity_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_character(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_character  # noqa: E501

        Returns character information for the supplied character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_character(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: ID of the character. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_character  # noqa: E501

        Returns character information for the supplied character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_character_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: ID of the character. (required)
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20033
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_character" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_character`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_character`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20033',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_clan_aggregate_stats(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_aggregate_stats  # noqa: E501

        Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_aggregate_stats(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def destiny2_get_clan_aggregate_stats_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_aggregate_stats  # noqa: E501

        Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_aggregate_stats_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'modes']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_aggregate_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_aggregate_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_clan_leaderboards(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_leaderboards(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def destiny2_get_clan_leaderboards_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_leaderboards_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
        if 'statid' in params:
            query_params.append(('statid', params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_clan_weekly_reward_state(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_weekly_reward_state  # noqa: E501

        Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_weekly_reward_state(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: A valid group id of clan. (required)
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_weekly_reward_state_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_clan_weekly_reward_state_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def destiny2_get_clan_weekly_reward_state_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_weekly_reward_state  # noqa: E501

        Returns information on the weekly clan rewards and if the clan has earned them or not. Note that this will always report rewards as not redeemed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_weekly_reward_state_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: A valid group id of clan. (required)
        :return: InlineResponse20034
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_weekly_reward_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_weekly_reward_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Clan/{groupId}/WeeklyRewardState/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20034',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_destiny_aggregate_activity_stats(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_destiny_aggregate_activity_stats  # noqa: E501

        Gets all activities the character has participated in together with aggregate statistics for those activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_aggregate_activity_stats(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The specific character whose activities should be returned. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_destiny_aggregate_activity_stats_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_destiny_aggregate_activity_stats  # noqa: E501

        Gets all activities the character has participated in together with aggregate statistics for those activities.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The specific character whose activities should be returned. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20048
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_destiny_aggregate_activity_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_destiny_aggregate_activity_stats`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_destiny_aggregate_activity_stats`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_destiny_aggregate_activity_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20048',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_destiny_entity_definition(self, entity_type, hash_identifier, **kwargs):  # noqa: E501
        """destiny2_get_destiny_entity_definition  # noqa: E501

        Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_entity_definition(entity_type, hash_identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity_type: The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
        :param int hash_identifier: The hash identifier for the specific Entity you want returned. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_destiny_entity_definition_with_http_info(entity_type, hash_identifier, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_destiny_entity_definition_with_http_info(entity_type, hash_identifier, **kwargs)  # noqa: E501
            return data

    def destiny2_get_destiny_entity_definition_with_http_info(self, entity_type, hash_identifier, **kwargs):  # noqa: E501
        """destiny2_get_destiny_entity_definition  # noqa: E501

        Returns the static definition of an entity of the given Type and hash identifier. Examine the API Documentation for the Type Names of entities that have their own definitions. Note that the return type will always *inherit from* DestinyDefinition, but the specific type returned will be the requested entity type if it can be found. Please don't use this as a chatty alternative to the Manifest database if you require large sets of data, but for simple and one-off accesses this should be handy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_entity_definition_with_http_info(entity_type, hash_identifier, async=True)
        >>> result = thread.get()

        :param async bool
        :param str entity_type: The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
        :param int hash_identifier: The hash identifier for the specific Entity you want returned. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['entity_type', 'hash_identifier']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_destiny_entity_definition" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'entity_type' is set
        if ('entity_type' not in params or
                params['entity_type'] is None):
            raise ValueError("Missing the required parameter `entity_type` when calling `destiny2_get_destiny_entity_definition`")  # noqa: E501
        # verify the required parameter 'hash_identifier' is set
        if ('hash_identifier' not in params or
                params['hash_identifier'] is None):
            raise ValueError("Missing the required parameter `hash_identifier` when calling `destiny2_get_destiny_entity_definition`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'entity_type' in params:
            path_params['entityType'] = params['entity_type']  # noqa: E501
        if 'hash_identifier' in params:
            path_params['hashIdentifier'] = params['hash_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Manifest/{entityType}/{hashIdentifier}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20030',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_destiny_manifest(self, **kwargs):  # noqa: E501
        """destiny2_get_destiny_manifest  # noqa: E501

        Returns the current version of the manifest as a json object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_manifest(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_destiny_manifest_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_destiny_manifest_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_get_destiny_manifest_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_get_destiny_manifest  # noqa: E501

        Returns the current version of the manifest as a json object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_destiny_manifest_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_destiny_manifest" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Manifest/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_historical_stats(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_historical_stats  # noqa: E501

        Gets historical stats for indicated character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param datetime dayend: Last day to return when daily stats are requested. Use the format YYYY-MM-DD.
        :param datetime daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
        :param list[DestinyHistoricalStatsDefinitionsDestinyActivityModeType] modes: Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param int period_type: Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_historical_stats_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_historical_stats  # noqa: E501

        Gets historical stats for indicated character.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param datetime dayend: Last day to return when daily stats are requested. Use the format YYYY-MM-DD.
        :param datetime daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
        :param list[DestinyHistoricalStatsDefinitionsDestinyActivityModeType] modes: Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param int period_type: Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
        :return: InlineResponse20044
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'dayend', 'daystart', 'groups', 'modes', 'period_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_historical_stats`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_historical_stats`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_historical_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'dayend' in params:
            query_params.append(('dayend', params['dayend']))  # noqa: E501
        if 'daystart' in params:
            query_params.append(('daystart', params['daystart']))  # noqa: E501
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
            collection_formats['modes'] = 'csv'  # noqa: E501
        if 'period_type' in params:
            query_params.append(('periodType', params['period_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20044',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_historical_stats_definition(self, **kwargs):  # noqa: E501
        """destiny2_get_historical_stats_definition  # noqa: E501

        Gets historical stats definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_definition(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_historical_stats_definition_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_historical_stats_definition_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_get_historical_stats_definition_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_get_historical_stats_definition  # noqa: E501

        Gets historical stats definitions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_definition_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats_definition" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Definition/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_historical_stats_for_account(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_historical_stats_for_account  # noqa: E501

        Gets aggregate historical stats organized around each character for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_for_account(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_historical_stats_for_account_with_http_info(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_historical_stats_for_account  # noqa: E501

        Gets aggregate historical stats organized around each character for a given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Groups of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'groups']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats_for_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_historical_stats_for_account`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_historical_stats_for_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'groups' in params:
            query_params.append(('groups', params['groups']))  # noqa: E501
            collection_formats['groups'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_item(self, destiny_membership_id, item_instance_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_item  # noqa: E501

        Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_item(destiny_membership_id, item_instance_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The membership ID of the destiny profile. (required)
        :param int item_instance_id: The Instance ID of the destiny item. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_item_with_http_info(destiny_membership_id, item_instance_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_item_with_http_info(destiny_membership_id, item_instance_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_item_with_http_info(self, destiny_membership_id, item_instance_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_item  # noqa: E501

        Retrieve the details of an instanced Destiny Item. An instanced Destiny item is one with an ItemInstanceId. Non-instanced items, such as materials, have no useful instance-specific details and thus are not queryable here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_item_with_http_info(destiny_membership_id, item_instance_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The membership ID of the destiny profile. (required)
        :param int item_instance_id: The Instance ID of the destiny item. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20035
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'item_instance_id', 'membership_type', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_item`")  # noqa: E501
        # verify the required parameter 'item_instance_id' is set
        if ('item_instance_id' not in params or
                params['item_instance_id'] is None):
            raise ValueError("Missing the required parameter `item_instance_id` when calling `destiny2_get_item`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'item_instance_id' in params:
            path_params['itemInstanceId'] = params['item_instance_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Item/{itemInstanceId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20035',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_leaderboards(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_leaderboards_with_http_info(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
        if 'statid' in params:
            query_params.append(('statid', params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_leaderboards_for_character(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards_for_character  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_for_character(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_leaderboards_for_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards_for_character  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards_for_character" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards_for_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
        if 'statid' in params:
            query_params.append(('statid', params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_post_game_carnage_report(self, activity_id, **kwargs):  # noqa: E501
        """destiny2_get_post_game_carnage_report  # noqa: E501

        Gets the available post game carnage report for the activity ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_post_game_carnage_report(activity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int activity_id: The ID of the activity whose PGCR is requested. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_post_game_carnage_report_with_http_info(activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_post_game_carnage_report_with_http_info(activity_id, **kwargs)  # noqa: E501
            return data

    def destiny2_get_post_game_carnage_report_with_http_info(self, activity_id, **kwargs):  # noqa: E501
        """destiny2_get_post_game_carnage_report  # noqa: E501

        Gets the available post game carnage report for the activity ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_post_game_carnage_report_with_http_info(activity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int activity_id: The ID of the activity whose PGCR is requested. (required)
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_post_game_carnage_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `destiny2_get_post_game_carnage_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/PostGameCarnageReport/{activityId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_profile(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_profile  # noqa: E501

        Returns Destiny Profile information for the supplied membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_profile(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_profile_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_profile_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_profile_with_http_info(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_profile  # noqa: E501

        Returns Destiny Profile information for the supplied membership.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_profile_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: Destiny membership ID. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20032
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_profile`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20032',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_public_milestone_content(self, milestone_hash, **kwargs):  # noqa: E501
        """destiny2_get_public_milestone_content  # noqa: E501

        Gets custom localized content for the milestone of the given hash, if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestone_content(milestone_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param int milestone_hash: The identifier for the milestone to be returned. (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_public_milestone_content_with_http_info(milestone_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_public_milestone_content_with_http_info(milestone_hash, **kwargs)  # noqa: E501
            return data

    def destiny2_get_public_milestone_content_with_http_info(self, milestone_hash, **kwargs):  # noqa: E501
        """destiny2_get_public_milestone_content  # noqa: E501

        Gets custom localized content for the milestone of the given hash, if it exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestone_content_with_http_info(milestone_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param int milestone_hash: The identifier for the milestone to be returned. (required)
        :return: InlineResponse20049
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['milestone_hash']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_public_milestone_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'milestone_hash' is set
        if ('milestone_hash' not in params or
                params['milestone_hash'] is None):
            raise ValueError("Missing the required parameter `milestone_hash` when calling `destiny2_get_public_milestone_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'milestone_hash' in params:
            path_params['milestoneHash'] = params['milestone_hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Milestones/{milestoneHash}/Content/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20049',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_public_milestones(self, **kwargs):  # noqa: E501
        """destiny2_get_public_milestones  # noqa: E501

        Gets public information about currently available Milestones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestones(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_public_milestones_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_public_milestones_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_get_public_milestones_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_get_public_milestones  # noqa: E501

        Gets public information about currently available Milestones.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_public_milestones_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20050
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_public_milestones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Milestones/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20050',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_unique_weapon_history(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_unique_weapon_history  # noqa: E501

        Gets details about unique weapon usage, including all exotic weapons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_unique_weapon_history(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_unique_weapon_history_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_unique_weapon_history  # noqa: E501

        Gets details about unique weapon usage, including all exotic weapons.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20047
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_unique_weapon_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_unique_weapon_history`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_unique_weapon_history`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_unique_weapon_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20047',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_vendor(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):  # noqa: E501
        """destiny2_get_vendor  # noqa: E501

        Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendor(character_id, destiny_membership_id, membership_type, vendor_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)  # noqa: E501
            return data

    def destiny2_get_vendor_with_http_info(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):  # noqa: E501
        """destiny2_get_vendor  # noqa: E501

        Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'vendor_hash', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendor`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendor`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendor`")  # noqa: E501
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in params or
                params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `destiny2_get_vendor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501
        if 'vendor_hash' in params:
            path_params['vendorHash'] = params['vendor_hash']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_vendors(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_vendors  # noqa: E501

        Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendors(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_vendors_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_vendors  # noqa: E501

        Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendors`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendors`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_insert_socket_plug(self, **kwargs):  # noqa: E501
        """destiny2_insert_socket_plug  # noqa: E501

        Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_insert_socket_plug(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_insert_socket_plug_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_insert_socket_plug_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_insert_socket_plug_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_insert_socket_plug  # noqa: E501

        Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_insert_socket_plug_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_insert_socket_plug" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_pull_from_postmaster(self, **kwargs):  # noqa: E501
        """destiny2_pull_from_postmaster  # noqa: E501

        Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_pull_from_postmaster(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_pull_from_postmaster_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_pull_from_postmaster_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_pull_from_postmaster_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_pull_from_postmaster  # noqa: E501

        Extract an item from the Postmaster, with whatever implications that may entail. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_pull_from_postmaster_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_pull_from_postmaster" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/PullFromPostmaster/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_report_offensive_post_game_carnage_report_player(self, activity_id, **kwargs):  # noqa: E501
        """destiny2_report_offensive_post_game_carnage_report_player  # noqa: E501

        Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_report_offensive_post_game_carnage_report_player(activity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int activity_id: The ID of the activity where you ran into the brigand that you're reporting. (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_report_offensive_post_game_carnage_report_player_with_http_info(activity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_report_offensive_post_game_carnage_report_player_with_http_info(activity_id, **kwargs)  # noqa: E501
            return data

    def destiny2_report_offensive_post_game_carnage_report_player_with_http_info(self, activity_id, **kwargs):  # noqa: E501
        """destiny2_report_offensive_post_game_carnage_report_player  # noqa: E501

        Report a player that you met in an activity that was engaging in ToS-violating activities. Both you and the offending player must have played in the activityId passed in. Please use this judiciously and only when you have strong suspicions of violation, pretty please.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_report_offensive_post_game_carnage_report_player_with_http_info(activity_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int activity_id: The ID of the activity where you ran into the brigand that you're reporting. (required)
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['activity_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_report_offensive_post_game_carnage_report_player" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'activity_id' is set
        if ('activity_id' not in params or
                params['activity_id'] is None):
            raise ValueError("Missing the required parameter `activity_id` when calling `destiny2_report_offensive_post_game_carnage_report_player`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'activity_id' in params:
            path_params['activityId'] = params['activity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/PostGameCarnageReport/{activityId}/Report/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_search_destiny_entities(self, search_term, type, **kwargs):  # noqa: E501
        """destiny2_search_destiny_entities  # noqa: E501

        Gets a page list of Destiny items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_entities(search_term, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_term: The string to use when searching for Destiny entities. (required)
        :param str type: The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. (required)
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_search_destiny_entities_with_http_info(search_term, type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_search_destiny_entities_with_http_info(search_term, type, **kwargs)  # noqa: E501
            return data

    def destiny2_search_destiny_entities_with_http_info(self, search_term, type, **kwargs):  # noqa: E501
        """destiny2_search_destiny_entities  # noqa: E501

        Gets a page list of Destiny items.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_entities_with_http_info(search_term, type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search_term: The string to use when searching for Destiny entities. (required)
        :param str type: The type of entity for whom you would like results. These correspond to the entity's definition contract name. For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'. (required)
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20043
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_term', 'type', 'page']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_search_destiny_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_term' is set
        if ('search_term' not in params or
                params['search_term'] is None):
            raise ValueError("Missing the required parameter `search_term` when calling `destiny2_search_destiny_entities`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `destiny2_search_destiny_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'search_term' in params:
            path_params['searchTerm'] = params['search_term']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Armory/Search/{type}/{searchTerm}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20043',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_search_destiny_player(self, display_name, membership_type, **kwargs):  # noqa: E501
        """destiny2_search_destiny_player  # noqa: E501

        Returns a list of Destiny memberships given a full Gamertag or PSN ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_player(display_name, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_name: The full gamertag or PSN id of the player. Spaces and case are ignored. (required)
        :param int membership_type: A valid non-BungieNet membership type, or All. (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_search_destiny_player_with_http_info(display_name, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_search_destiny_player_with_http_info(display_name, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_search_destiny_player_with_http_info(self, display_name, membership_type, **kwargs):  # noqa: E501
        """destiny2_search_destiny_player  # noqa: E501

        Returns a list of Destiny memberships given a full Gamertag or PSN ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_search_destiny_player_with_http_info(display_name, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str display_name: The full gamertag or PSN id of the player. Spaces and case are ignored. (required)
        :param int membership_type: A valid non-BungieNet membership type, or All. (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['display_name', 'membership_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_search_destiny_player" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'display_name' is set
        if ('display_name' not in params or
                params['display_name'] is None):
            raise ValueError("Missing the required parameter `display_name` when calling `destiny2_search_destiny_player`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_search_destiny_player`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'display_name' in params:
            path_params['displayName'] = params['display_name']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/SearchDestinyPlayer/{membershipType}/{displayName}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20031',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_set_item_lock_state(self, **kwargs):  # noqa: E501
        """destiny2_set_item_lock_state  # noqa: E501

        Set the Lock State for an instanced item. You must have a valid Destiny Account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_set_item_lock_state(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_set_item_lock_state_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_set_item_lock_state_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_set_item_lock_state_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_set_item_lock_state  # noqa: E501

        Set the Lock State for an instanced item. You must have a valid Destiny Account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_set_item_lock_state_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_set_item_lock_state" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/SetLockState/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_transfer_item(self, **kwargs):  # noqa: E501
        """destiny2_transfer_item  # noqa: E501

        Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_transfer_item(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_transfer_item_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_transfer_item_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_transfer_item_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_transfer_item  # noqa: E501

        Transfer an item to/from your vault. You must have a valid Destiny account. You must also pass BOTH a reference AND an instance ID if it's an instanced item. itshappening.gif  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_transfer_item_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_transfer_item" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/TransferItem/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
