# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PreviewApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def destiny2_activate_talent_node(self, **kwargs):  # noqa: E501
        """destiny2_activate_talent_node  # noqa: E501

        Activate a Talent Node. Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_activate_talent_node(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_activate_talent_node_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_activate_talent_node_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_activate_talent_node_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_activate_talent_node  # noqa: E501

        Activate a Talent Node. Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_activate_talent_node_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_activate_talent_node" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/ActivateTalentNode/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_clan_aggregate_stats(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_aggregate_stats  # noqa: E501

        Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_aggregate_stats(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def destiny2_get_clan_aggregate_stats_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_aggregate_stats  # noqa: E501

        Gets aggregated stats for a clan using the same categories as the clan leaderboards. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_aggregate_stats_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'modes']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_aggregate_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_aggregate_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_clan_leaderboards(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_leaderboards(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def destiny2_get_clan_leaderboards_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """destiny2_get_clan_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_clan_leaderboards_with_http_info(group_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params or
                params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']  # noqa: E501

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
        if 'statid' in params:
            query_params.append(('statid', params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_leaderboards(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_leaderboards_with_http_info(self, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint has not yet been implemented. It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
        if 'statid' in params:
            query_params.append(('statid', params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_leaderboards_for_character(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards_for_character  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_for_character(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_leaderboards_for_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_leaderboards_for_character  # noqa: E501

        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus. PREVIEW: This endpoint is still in beta, and may experience rough edges. The schema is in final form, but there may be bugs that prevent desirable operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards_for_character" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards_for_character`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards_for_character`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))  # noqa: E501
        if 'modes' in params:
            query_params.append(('modes', params['modes']))  # noqa: E501
        if 'statid' in params:
            query_params.append(('statid', params['statid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_vendor(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):  # noqa: E501
        """destiny2_get_vendor  # noqa: E501

        Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendor(character_id, destiny_membership_id, membership_type, vendor_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)  # noqa: E501
            return data

    def destiny2_get_vendor_with_http_info(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):  # noqa: E501
        """destiny2_get_vendor  # noqa: E501

        Get the details of a specific Vendor. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'vendor_hash', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendor`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendor`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendor`")  # noqa: E501
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in params or
                params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `destiny2_get_vendor`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501
        if 'vendor_hash' in params:
            path_params['vendorHash'] = params['vendor_hash']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_get_vendors(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_vendors  # noqa: E501

        Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendors(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)  # noqa: E501
            return data

    def destiny2_get_vendors_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):  # noqa: E501
        """destiny2_get_vendors  # noqa: E501

        Get currently available vendors from the list of vendors that can possibly have rotating inventory. Note that this does not include things like preview vendors and vendors-as-kiosks, neither of whom have rotating/dynamic inventories. Use their definitions as-is for those. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values). See the DestinyComponentType enum for valid components to request. You must request at least one component to receive results.
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'components']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params or
                params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendors`")  # noqa: E501
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params or
                params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendors`")  # noqa: E501
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params or
                params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']  # noqa: E501
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']  # noqa: E501
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']  # noqa: E501

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))  # noqa: E501
            collection_formats['components'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destiny2_insert_socket_plug(self, **kwargs):  # noqa: E501
        """destiny2_insert_socket_plug  # noqa: E501

        Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_insert_socket_plug(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.destiny2_insert_socket_plug_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.destiny2_insert_socket_plug_with_http_info(**kwargs)  # noqa: E501
            return data

    def destiny2_insert_socket_plug_with_http_info(self, **kwargs):  # noqa: E501
        """destiny2_insert_socket_plug  # noqa: E501

        Insert a plug into a socketed item. I know how it sounds, but I assure you it's much more G-rated than you might be guessing. We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so. You must have a valid Destiny Account, and either be in a social space, in orbit, or offline. PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.destiny2_insert_socket_plug_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse20015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_insert_socket_plug" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20015',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
