# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.

    OpenAPI spec version: 2.0.0
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class PreviewApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def destiny2_activate_talent_node(self, **kwargs):
        """
        Activate a Talent Node.  Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_activate_talent_node(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_activate_talent_node_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_activate_talent_node_with_http_info(**kwargs)
            return data

    def destiny2_activate_talent_node_with_http_info(self, **kwargs):
        """
        Activate a Talent Node.  Chill out, everyone: we haven't decided yet whether this will be able to activate nodes with costs, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not actually implemented yet, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_activate_talent_node_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_activate_talent_node" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api('/Destiny2/Actions/Items/ActivateTalentNode/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20020',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_activity_history(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets activity history stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_activity_history(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int count: Number of rows to return
        :param int mode: A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_activity_history_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets activity history stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_activity_history_with_http_info(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int count: Number of rows to return
        :param int mode: A filter for the activity mode to be returned. None returns all activities. See the documentation for DestinyActivityModeType for valid values, and pass in string representation.
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'count', 'mode', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_activity_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_activity_history`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_activity_history`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_activity_history`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'count' in params:
            query_params.append(('count', params['count']))
        if 'mode' in params:
            query_params.append(('mode', params['mode']))
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/Activities/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20029',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_clan_aggregate_stats(self, group_id, **kwargs):
        """
        Gets aggregated stats for a clan using the same categories as the clan leaderboards.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_clan_aggregate_stats(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)
        else:
            (data) = self.destiny2_get_clan_aggregate_stats_with_http_info(group_id, **kwargs)
            return data

    def destiny2_get_clan_aggregate_stats_with_http_info(self, group_id, **kwargs):
        """
        Gets aggregated stats for a clan using the same categories as the clan leaderboards.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_clan_aggregate_stats_with_http_info(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'modes']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_aggregate_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_aggregate_stats`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []
        if 'modes' in params:
            query_params.append(('modes', params['modes']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/AggregateClanStats/{groupId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20025',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_clan_leaderboards(self, group_id, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_clan_leaderboards(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)
        else:
            (data) = self.destiny2_get_clan_leaderboards_with_http_info(group_id, **kwargs)
            return data

    def destiny2_get_clan_leaderboards_with_http_info(self, group_id, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_clan_leaderboards_with_http_info(group_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int group_id: Group ID of the clan whose leaderboards you wish to fetch. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'maxtop', 'modes', 'statid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_clan_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in params) or (params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `destiny2_get_clan_leaderboards`")


        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['groupId'] = params['group_id']

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'statid' in params:
            query_params.append(('statid', params['statid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/Leaderboards/Clans/{groupId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20024',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_destiny_aggregate_activity_stats(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets all activities the character has participated in together with aggregate statistics for those activities.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_destiny_aggregate_activity_stats(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The specific character whose activities should be returned. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_destiny_aggregate_activity_stats_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets all activities the character has participated in together with aggregate statistics for those activities.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_destiny_aggregate_activity_stats_with_http_info(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The specific character whose activities should be returned. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20031
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_destiny_aggregate_activity_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_destiny_aggregate_activity_stats`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_destiny_aggregate_activity_stats`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_destiny_aggregate_activity_stats`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/AggregateActivityStats/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20031',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_historical_stats(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets historical stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_historical_stats(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param datetime dayend: Last day to return when daily stats are requested.  Use the format YYYY-MM-DD.
        :param datetime daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
        :param list[DestinyHistoricalStatsDefinitionsDestinyActivityModeType] modes: Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param int period_type: Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_historical_stats_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets historical stats for indicated character.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_historical_stats_with_http_info(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The id of the character to retrieve. You can omit this character ID or set it to 0 to get aggregate stats across all characters. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param datetime dayend: Last day to return when daily stats are requested.  Use the format YYYY-MM-DD.
        :param datetime daystart: First day to return when daily stats are requested. Use the format YYYY-MM-DD
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Group of stats to include, otherwise only general stats are returned. Comma separated list is allowed. Values: General, Weapons, Medals
        :param list[DestinyHistoricalStatsDefinitionsDestinyActivityModeType] modes: Game modes to return. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param int period_type: Indicates a specific period type to return. Optional. May be: Daily, AllTime, or Activity
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'dayend', 'daystart', 'groups', 'modes', 'period_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_historical_stats`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_historical_stats`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_historical_stats`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'dayend' in params:
            query_params.append(('dayend', params['dayend']))
        if 'daystart' in params:
            query_params.append(('daystart', params['daystart']))
        if 'groups' in params:
            query_params.append(('groups', params['groups']))
            collection_formats['groups'] = 'csv'
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
            collection_formats['modes'] = 'csv'
        if 'period_type' in params:
            query_params.append(('periodType', params['period_type']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20027',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_historical_stats_for_account(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets aggregate historical stats organized around each character for a given account.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_historical_stats_for_account(destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Groups of stats to include, otherwise only general stats are returned.  Comma separated list is allowed. Values: General, Weapons, Medals.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_historical_stats_for_account_with_http_info(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets aggregate historical stats organized around each character for a given account.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_historical_stats_for_account_with_http_info(destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyHistoricalStatsDefinitionsDestinyStatsGroupType] groups: Groups of stats to include, otherwise only general stats are returned.  Comma separated list is allowed. Values: General, Weapons, Medals.
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'groups']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_historical_stats_for_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_historical_stats_for_account`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_historical_stats_for_account`")


        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'groups' in params:
            query_params.append(('groups', params['groups']))
            collection_formats['groups'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20028',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_leaderboards(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint has not yet been implemented.  It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_leaderboards(destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_leaderboards_with_http_info(self, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint has not yet been implemented.  It is being returned for a preview of future functionality, and for public comment/suggestion/preparation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_leaderboards_with_http_info(destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards`")


        collection_formats = {}

        path_params = {}
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'statid' in params:
            query_params.append(('statid', params['statid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Stats/Leaderboards/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20024',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_leaderboards_for_character(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_leaderboards_for_character(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_leaderboards_for_character_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets leaderboards with the signed in user's friends and the supplied destinyMembershipId as the focus.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_leaderboards_for_character_with_http_info(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The specific character to build the leaderboard around for the provided Destiny Membership. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int maxtop: Maximum number of top players to return. Use a large number to get entire leaderboard.
        :param str modes: List of game modes for which to get leaderboards. See the documentation for DestinyActivityModeType for valid values, and pass in string representation, comma delimited.
        :param str statid: ID of stat to return rather than returning all Leaderboard stats.
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'maxtop', 'modes', 'statid']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_leaderboards_for_character" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_leaderboards_for_character`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_leaderboards_for_character`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_leaderboards_for_character`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'maxtop' in params:
            query_params.append(('maxtop', params['maxtop']))
        if 'modes' in params:
            query_params.append(('modes', params['modes']))
        if 'statid' in params:
            query_params.append(('statid', params['statid']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Stats/Leaderboards/{membershipType}/{destinyMembershipId}/{characterId}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20024',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_unique_weapon_history(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets details about unique weapon usage, including all exotic weapons.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_unique_weapon_history(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_unique_weapon_history_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Gets details about unique weapon usage, including all exotic weapons.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is in final form, but there may be bugs that prevent desirable operation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_unique_weapon_history_with_http_info(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The id of the character to retrieve. (required)
        :param int destiny_membership_id: The Destiny membershipId of the user to retrieve. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :return: InlineResponse20030
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_unique_weapon_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_unique_weapon_history`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_unique_weapon_history`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_unique_weapon_history`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Account/{destinyMembershipId}/Character/{characterId}/Stats/UniqueWeapons/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20030',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_vendor(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):
        """
        Get the details of a specific Vendor.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_vendor(character_id, destiny_membership_id, membership_type, vendor_hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)
        else:
            (data) = self.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs)
            return data

    def destiny2_get_vendor_with_http_info(self, character_id, destiny_membership_id, membership_type, vendor_hash, **kwargs):
        """
        Get the details of a specific Vendor.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_vendor_with_http_info(character_id, destiny_membership_id, membership_type, vendor_hash, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param int vendor_hash: The Hash identifier of the Vendor to be returned. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: InlineResponse20019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'vendor_hash', 'components']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendor" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendor`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendor`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendor`")
        # verify the required parameter 'vendor_hash' is set
        if ('vendor_hash' not in params) or (params['vendor_hash'] is None):
            raise ValueError("Missing the required parameter `vendor_hash` when calling `destiny2_get_vendor`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']
        if 'vendor_hash' in params:
            path_params['vendorHash'] = params['vendor_hash']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))
            collection_formats['components'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/{vendorHash}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20019',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_get_vendors(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Get currently available vendors.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_vendors(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
        else:
            (data) = self.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, **kwargs)
            return data

    def destiny2_get_vendors_with_http_info(self, character_id, destiny_membership_id, membership_type, **kwargs):
        """
        Get currently available vendors.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_get_vendors_with_http_info(character_id, destiny_membership_id, membership_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int character_id: The Destiny Character ID of the character for whom we're getting vendor info. (required)
        :param int destiny_membership_id: Destiny membership ID of another user. You may be denied. (required)
        :param int membership_type: A valid non-BungieNet membership type. (required)
        :param list[DestinyDestinyComponentType] components: A comma separated list of components to return (as strings or numeric values).  See the DestinyComponentType enum for valid components to request.  You must request at least one component to receive results.
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['character_id', 'destiny_membership_id', 'membership_type', 'components']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_get_vendors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'character_id' is set
        if ('character_id' not in params) or (params['character_id'] is None):
            raise ValueError("Missing the required parameter `character_id` when calling `destiny2_get_vendors`")
        # verify the required parameter 'destiny_membership_id' is set
        if ('destiny_membership_id' not in params) or (params['destiny_membership_id'] is None):
            raise ValueError("Missing the required parameter `destiny_membership_id` when calling `destiny2_get_vendors`")
        # verify the required parameter 'membership_type' is set
        if ('membership_type' not in params) or (params['membership_type'] is None):
            raise ValueError("Missing the required parameter `membership_type` when calling `destiny2_get_vendors`")


        collection_formats = {}

        path_params = {}
        if 'character_id' in params:
            path_params['characterId'] = params['character_id']
        if 'destiny_membership_id' in params:
            path_params['destinyMembershipId'] = params['destiny_membership_id']
        if 'membership_type' in params:
            path_params['membershipType'] = params['membership_type']

        query_params = []
        if 'components' in params:
            query_params.append(('components', params['components']))
            collection_formats['components'] = 'csv'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/{membershipType}/Profile/{destinyMembershipId}/Character/{characterId}/Vendors/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20018',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_insert_socket_plug(self, **kwargs):
        """
        Insert a plug into a socketed item.  I know how it sounds, but I assure you it's much more G-rated than you might be guessing.  We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_insert_socket_plug(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_insert_socket_plug_with_http_info(**kwargs)
        else:
            (data) = self.destiny2_insert_socket_plug_with_http_info(**kwargs)
            return data

    def destiny2_insert_socket_plug_with_http_info(self, **kwargs):
        """
        Insert a plug into a socketed item.  I know how it sounds, but I assure you it's much more G-rated than you might be guessing.  We haven't decided yet whether this will be able to insert plugs that have side effects, but if we do it will require special scope permission for an application attempting to do so.  You must have a valid Destiny Account, and either be in a social space, in orbit, or offline.  PREVIEW: This service is not yet active, but we are returning the planned schema of the endpoint for review, comment, and preparation for its eventual implementation.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_insert_socket_plug_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_insert_socket_plug" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['oauth2']

        return self.api_client.call_api('/Destiny2/Actions/Items/InsertSocketPlug/', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20020',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destiny2_search_destiny_entities(self, search_term, type, **kwargs):
        """
        Gets a page list of Destiny items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_search_destiny_entities(search_term, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_term: The string to use when searching for Destiny entities. (required)
        :param str type: The type of entity for whom you would like results.  These correspond to the entity's definition contract name.  For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destiny2_search_destiny_entities_with_http_info(search_term, type, **kwargs)
        else:
            (data) = self.destiny2_search_destiny_entities_with_http_info(search_term, type, **kwargs)
            return data

    def destiny2_search_destiny_entities_with_http_info(self, search_term, type, **kwargs):
        """
        Gets a page list of Destiny items.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destiny2_search_destiny_entities_with_http_info(search_term, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str search_term: The string to use when searching for Destiny entities. (required)
        :param str type: The type of entity for whom you would like results.  These correspond to the entity's definition contract name.  For instance, if you are looking for items, this property should be 'DestinyInventoryItemDefinition'.  PREVIEW: This endpoint is still in beta, and may experience rough edges.  The schema is tentatively in final form, but there may be bugs that prevent desirable operation. (required)
        :param int page: Page number to return, starting with 0.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_term', 'type', 'page']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destiny2_search_destiny_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_term' is set
        if ('search_term' not in params) or (params['search_term'] is None):
            raise ValueError("Missing the required parameter `search_term` when calling `destiny2_search_destiny_entities`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `destiny2_search_destiny_entities`")


        collection_formats = {}

        path_params = {}
        if 'search_term' in params:
            path_params['searchTerm'] = params['search_term']
        if 'type' in params:
            path_params['type'] = params['type']

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/Destiny2/Armory/Search/{type}/{searchTerm}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InlineResponse20026',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
