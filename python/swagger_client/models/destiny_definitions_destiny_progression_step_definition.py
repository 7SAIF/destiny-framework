# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_destiny_item_quantity import DestinyDestinyItemQuantity  # noqa: F401,E501


class DestinyDefinitionsDestinyProgressionStepDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step_name': 'str',
        'display_effect_type': 'object',
        'progress_total': 'int',
        'reward_items': 'list[DestinyDestinyItemQuantity]'
    }

    attribute_map = {
        'step_name': 'stepName',
        'display_effect_type': 'displayEffectType',
        'progress_total': 'progressTotal',
        'reward_items': 'rewardItems'
    }

    def __init__(self, step_name=None, display_effect_type=None, progress_total=None, reward_items=None):  # noqa: E501
        """DestinyDefinitionsDestinyProgressionStepDefinition - a model defined in Swagger"""  # noqa: E501

        self._step_name = None
        self._display_effect_type = None
        self._progress_total = None
        self._reward_items = None
        self.discriminator = None

        if step_name is not None:
            self.step_name = step_name
        if display_effect_type is not None:
            self.display_effect_type = display_effect_type
        if progress_total is not None:
            self.progress_total = progress_total
        if reward_items is not None:
            self.reward_items = reward_items

    @property
    def step_name(self):
        """Gets the step_name of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501

        Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.  # noqa: E501

        :return: The step_name of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this DestinyDefinitionsDestinyProgressionStepDefinition.

        Very rarely, Progressions will have localized text describing the Level of the progression. This will be that localized text, if it exists. Otherwise, the standard appears to be to simply show the level numerically.  # noqa: E501

        :param step_name: The step_name of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :type: str
        """

        self._step_name = step_name

    @property
    def display_effect_type(self):
        """Gets the display_effect_type of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501

        This appears to be, when you \"level up\", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.  # noqa: E501

        :return: The display_effect_type of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :rtype: object
        """
        return self._display_effect_type

    @display_effect_type.setter
    def display_effect_type(self, display_effect_type):
        """Sets the display_effect_type of this DestinyDefinitionsDestinyProgressionStepDefinition.

        This appears to be, when you \"level up\", whether a visual effect will display and on what entity. See DestinyProgressionStepDisplayEffect for slightly more info.  # noqa: E501

        :param display_effect_type: The display_effect_type of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :type: object
        """

        self._display_effect_type = display_effect_type

    @property
    def progress_total(self):
        """Gets the progress_total of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501

        The total amount of progression points/\"experience\" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.  # noqa: E501

        :return: The progress_total of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :rtype: int
        """
        return self._progress_total

    @progress_total.setter
    def progress_total(self, progress_total):
        """Sets the progress_total of this DestinyDefinitionsDestinyProgressionStepDefinition.

        The total amount of progression points/\"experience\" you will need to initially reach this step. If this is the last step and the progression is repeating indefinitely (DestinyProgressionDefinition.repeatLastStep), this will also be the progress needed to level it up further by repeating this step again.  # noqa: E501

        :param progress_total: The progress_total of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :type: int
        """

        self._progress_total = progress_total

    @property
    def reward_items(self):
        """Gets the reward_items of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501

        A listing of items rewarded as a result of reaching this level.  # noqa: E501

        :return: The reward_items of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :rtype: list[DestinyDestinyItemQuantity]
        """
        return self._reward_items

    @reward_items.setter
    def reward_items(self, reward_items):
        """Sets the reward_items of this DestinyDefinitionsDestinyProgressionStepDefinition.

        A listing of items rewarded as a result of reaching this level.  # noqa: E501

        :param reward_items: The reward_items of this DestinyDefinitionsDestinyProgressionStepDefinition.  # noqa: E501
        :type: list[DestinyDestinyItemQuantity]
        """

        self._reward_items = reward_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyDefinitionsDestinyProgressionStepDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
