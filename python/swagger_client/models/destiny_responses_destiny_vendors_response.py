# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_item_component_set_ofint32 import DestinyItemComponentSetOfint32  # noqa: F401,E501


class DestinyResponsesDestinyVendorsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendors': 'object',
        'categories': 'object',
        'sales': 'object',
        'item_components': 'dict(str, DestinyItemComponentSetOfint32)'
    }

    attribute_map = {
        'vendors': 'vendors',
        'categories': 'categories',
        'sales': 'sales',
        'item_components': 'itemComponents'
    }

    def __init__(self, vendors=None, categories=None, sales=None, item_components=None):  # noqa: E501
        """DestinyResponsesDestinyVendorsResponse - a model defined in Swagger"""  # noqa: E501

        self._vendors = None
        self._categories = None
        self._sales = None
        self._item_components = None
        self.discriminator = None

        if vendors is not None:
            self.vendors = vendors
        if categories is not None:
            self.categories = categories
        if sales is not None:
            self.sales = sales
        if item_components is not None:
            self.item_components = item_components

    @property
    def vendors(self):
        """Gets the vendors of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501

        The base properties of the vendor.  COMPONENT TYPE: Vendors  # noqa: E501

        :return: The vendors of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :rtype: object
        """
        return self._vendors

    @vendors.setter
    def vendors(self, vendors):
        """Sets the vendors of this DestinyResponsesDestinyVendorsResponse.

        The base properties of the vendor.  COMPONENT TYPE: Vendors  # noqa: E501

        :param vendors: The vendors of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :type: object
        """

        self._vendors = vendors

    @property
    def categories(self):
        """Gets the categories of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501

        Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories  # noqa: E501

        :return: The categories of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :rtype: object
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this DestinyResponsesDestinyVendorsResponse.

        Categories that the vendor has available, and references to the sales therein.  COMPONENT TYPE: VendorCategories  # noqa: E501

        :param categories: The categories of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :type: object
        """

        self._categories = categories

    @property
    def sales(self):
        """Gets the sales of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501

        Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales  # noqa: E501

        :return: The sales of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :rtype: object
        """
        return self._sales

    @sales.setter
    def sales(self, sales):
        """Sets the sales of this DestinyResponsesDestinyVendorsResponse.

        Sales, keyed by the vendorItemIndex of the item being sold.  COMPONENT TYPE: VendorSales  # noqa: E501

        :param sales: The sales of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :type: object
        """

        self._sales = sales

    @property
    def item_components(self):
        """Gets the item_components of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501


        :return: The item_components of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :rtype: dict(str, DestinyItemComponentSetOfint32)
        """
        return self._item_components

    @item_components.setter
    def item_components(self, item_components):
        """Sets the item_components of this DestinyResponsesDestinyVendorsResponse.


        :param item_components: The item_components of this DestinyResponsesDestinyVendorsResponse.  # noqa: E501
        :type: dict(str, DestinyItemComponentSetOfint32)
        """

        self._item_components = item_components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyResponsesDestinyVendorsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
