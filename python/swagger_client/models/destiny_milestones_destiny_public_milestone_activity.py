# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_milestones_destiny_public_milestone_activity_variant import DestinyMilestonesDestinyPublicMilestoneActivityVariant  # noqa: F401,E501


class DestinyMilestonesDestinyPublicMilestoneActivity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_hash': 'int',
        'modifier_hashes': 'list[int]',
        'variants': 'list[DestinyMilestonesDestinyPublicMilestoneActivityVariant]',
        'activity_mode_hash': 'int',
        'activity_mode_type': 'int'
    }

    attribute_map = {
        'activity_hash': 'activityHash',
        'modifier_hashes': 'modifierHashes',
        'variants': 'variants',
        'activity_mode_hash': 'activityModeHash',
        'activity_mode_type': 'activityModeType'
    }

    def __init__(self, activity_hash=None, modifier_hashes=None, variants=None, activity_mode_hash=None, activity_mode_type=None):  # noqa: E501
        """DestinyMilestonesDestinyPublicMilestoneActivity - a model defined in Swagger"""  # noqa: E501

        self._activity_hash = None
        self._modifier_hashes = None
        self._variants = None
        self._activity_mode_hash = None
        self._activity_mode_type = None
        self.discriminator = None

        if activity_hash is not None:
            self.activity_hash = activity_hash
        if modifier_hashes is not None:
            self.modifier_hashes = modifier_hashes
        if variants is not None:
            self.variants = variants
        if activity_mode_hash is not None:
            self.activity_mode_hash = activity_mode_hash
        if activity_mode_type is not None:
            self.activity_mode_type = activity_mode_type

    @property
    def activity_hash(self):
        """Gets the activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501

        The hash identifier of the activity that's been chosen to be considered the canonical \"conceptual\" activity definition. This may have many variants, defined herein.  # noqa: E501

        :return: The activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :rtype: int
        """
        return self._activity_hash

    @activity_hash.setter
    def activity_hash(self, activity_hash):
        """Sets the activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.

        The hash identifier of the activity that's been chosen to be considered the canonical \"conceptual\" activity definition. This may have many variants, defined herein.  # noqa: E501

        :param activity_hash: The activity_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :type: int
        """

        self._activity_hash = activity_hash

    @property
    def modifier_hashes(self):
        """Gets the modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501

        The activity may have 0-to-many modifiers: if it does, this will contain the hashes to the DestinyActivityModifierDefinition that defines the modifier being applied.  # noqa: E501

        :return: The modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :rtype: list[int]
        """
        return self._modifier_hashes

    @modifier_hashes.setter
    def modifier_hashes(self, modifier_hashes):
        """Sets the modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.

        The activity may have 0-to-many modifiers: if it does, this will contain the hashes to the DestinyActivityModifierDefinition that defines the modifier being applied.  # noqa: E501

        :param modifier_hashes: The modifier_hashes of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :type: list[int]
        """

        self._modifier_hashes = modifier_hashes

    @property
    def variants(self):
        """Gets the variants of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501

        Every relevant variation of this conceptual activity, including the conceptual activity itself, have variants defined here.  # noqa: E501

        :return: The variants of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :rtype: list[DestinyMilestonesDestinyPublicMilestoneActivityVariant]
        """
        return self._variants

    @variants.setter
    def variants(self, variants):
        """Sets the variants of this DestinyMilestonesDestinyPublicMilestoneActivity.

        Every relevant variation of this conceptual activity, including the conceptual activity itself, have variants defined here.  # noqa: E501

        :param variants: The variants of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :type: list[DestinyMilestonesDestinyPublicMilestoneActivityVariant]
        """

        self._variants = variants

    @property
    def activity_mode_hash(self):
        """Gets the activity_mode_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501

        The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.  # noqa: E501

        :return: The activity_mode_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :rtype: int
        """
        return self._activity_mode_hash

    @activity_mode_hash.setter
    def activity_mode_hash(self, activity_mode_hash):
        """Sets the activity_mode_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.

        The hash identifier of the most specific Activity Mode under which this activity is played. This is useful for situations where the activity in question is - for instance - a PVP map, but it's not clear what mode the PVP map is being played under. If it's a playlist, this will be less specific: but hopefully useful in some way.  # noqa: E501

        :param activity_mode_hash: The activity_mode_hash of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :type: int
        """

        self._activity_mode_hash = activity_mode_hash

    @property
    def activity_mode_type(self):
        """Gets the activity_mode_type of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501

        The enumeration equivalent of the most specific Activity Mode under which this activity is played.  # noqa: E501

        :return: The activity_mode_type of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :rtype: int
        """
        return self._activity_mode_type

    @activity_mode_type.setter
    def activity_mode_type(self, activity_mode_type):
        """Sets the activity_mode_type of this DestinyMilestonesDestinyPublicMilestoneActivity.

        The enumeration equivalent of the most specific Activity Mode under which this activity is played.  # noqa: E501

        :param activity_mode_type: The activity_mode_type of this DestinyMilestonesDestinyPublicMilestoneActivity.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 38, 39, 40, 41, 42, 43, 44, 45]  # noqa: E501
        if activity_mode_type not in allowed_values:
            raise ValueError(
                "Invalid value for `activity_mode_type` ({0}), must be one of {1}"  # noqa: E501
                .format(activity_mode_type, allowed_values)
            )

        self._activity_mode_type = activity_mode_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMilestonesDestinyPublicMilestoneActivity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
