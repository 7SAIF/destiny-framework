# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_damage_type import DestinyDamageType  # noqa: F401,E501
from swagger_client.models.destiny_definitions_animations_destiny_animation_reference import DestinyDefinitionsAnimationsDestinyAnimationReference  # noqa: F401,E501
from swagger_client.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition  # noqa: F401,E501
from swagger_client.models.destiny_definitions_destiny_item_investment_stat_definition import DestinyDefinitionsDestinyItemInvestmentStatDefinition  # noqa: F401,E501
from swagger_client.models.destiny_definitions_destiny_item_perk_entry_definition import DestinyDefinitionsDestinyItemPerkEntryDefinition  # noqa: F401,E501
from swagger_client.models.links_hyperlink_reference import LinksHyperlinkReference  # noqa: F401,E501


class DestinyDefinitionsDestinyInventoryItemDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_properties': 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'secondary_icon': 'str',
        'secondary_overlay': 'str',
        'secondary_special': 'str',
        'background_color': 'object',
        'screenshot': 'str',
        'item_type_display_name': 'str',
        'ui_item_display_style': 'str',
        'item_type_and_tier_display_name': 'str',
        'display_source': 'str',
        'tooltip_style': 'str',
        'action': 'object',
        'inventory': 'object',
        'set_data': 'object',
        'stats': 'object',
        'emblem_objective_hash': 'int',
        'equipping_block': 'object',
        'translation_block': 'object',
        'preview': 'object',
        'quality': 'object',
        'value': 'object',
        'source_data': 'object',
        'objectives': 'object',
        'plug': 'object',
        'gearset': 'object',
        'sack': 'object',
        'sockets': 'object',
        'summary': 'object',
        'talent_grid': 'object',
        'investment_stats': 'list[DestinyDefinitionsDestinyItemInvestmentStatDefinition]',
        'perks': 'list[DestinyDefinitionsDestinyItemPerkEntryDefinition]',
        'lore_hash': 'int',
        'summary_item_hash': 'int',
        'animations': 'list[DestinyDefinitionsAnimationsDestinyAnimationReference]',
        'allow_actions': 'bool',
        'links': 'list[LinksHyperlinkReference]',
        'does_postmaster_pull_have_side_effects': 'bool',
        'non_transferrable': 'bool',
        'item_category_hashes': 'list[int]',
        'special_item_type': 'object',
        'item_type': 'object',
        'item_sub_type': 'object',
        'class_type': 'object',
        'equippable': 'bool',
        'damage_type_hashes': 'list[int]',
        'damage_types': 'list[DestinyDamageType]',
        'default_damage_type': 'object',
        'default_damage_type_hash': 'int',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'secondary_icon': 'secondaryIcon',
        'secondary_overlay': 'secondaryOverlay',
        'secondary_special': 'secondarySpecial',
        'background_color': 'backgroundColor',
        'screenshot': 'screenshot',
        'item_type_display_name': 'itemTypeDisplayName',
        'ui_item_display_style': 'uiItemDisplayStyle',
        'item_type_and_tier_display_name': 'itemTypeAndTierDisplayName',
        'display_source': 'displaySource',
        'tooltip_style': 'tooltipStyle',
        'action': 'action',
        'inventory': 'inventory',
        'set_data': 'setData',
        'stats': 'stats',
        'emblem_objective_hash': 'emblemObjectiveHash',
        'equipping_block': 'equippingBlock',
        'translation_block': 'translationBlock',
        'preview': 'preview',
        'quality': 'quality',
        'value': 'value',
        'source_data': 'sourceData',
        'objectives': 'objectives',
        'plug': 'plug',
        'gearset': 'gearset',
        'sack': 'sack',
        'sockets': 'sockets',
        'summary': 'summary',
        'talent_grid': 'talentGrid',
        'investment_stats': 'investmentStats',
        'perks': 'perks',
        'lore_hash': 'loreHash',
        'summary_item_hash': 'summaryItemHash',
        'animations': 'animations',
        'allow_actions': 'allowActions',
        'links': 'links',
        'does_postmaster_pull_have_side_effects': 'doesPostmasterPullHaveSideEffects',
        'non_transferrable': 'nonTransferrable',
        'item_category_hashes': 'itemCategoryHashes',
        'special_item_type': 'specialItemType',
        'item_type': 'itemType',
        'item_sub_type': 'itemSubType',
        'class_type': 'classType',
        'equippable': 'equippable',
        'damage_type_hashes': 'damageTypeHashes',
        'damage_types': 'damageTypes',
        'default_damage_type': 'defaultDamageType',
        'default_damage_type_hash': 'defaultDamageTypeHash',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, secondary_icon=None, secondary_overlay=None, secondary_special=None, background_color=None, screenshot=None, item_type_display_name=None, ui_item_display_style=None, item_type_and_tier_display_name=None, display_source=None, tooltip_style=None, action=None, inventory=None, set_data=None, stats=None, emblem_objective_hash=None, equipping_block=None, translation_block=None, preview=None, quality=None, value=None, source_data=None, objectives=None, plug=None, gearset=None, sack=None, sockets=None, summary=None, talent_grid=None, investment_stats=None, perks=None, lore_hash=None, summary_item_hash=None, animations=None, allow_actions=None, links=None, does_postmaster_pull_have_side_effects=None, non_transferrable=None, item_category_hashes=None, special_item_type=None, item_type=None, item_sub_type=None, class_type=None, equippable=None, damage_type_hashes=None, damage_types=None, default_damage_type=None, default_damage_type_hash=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyDefinitionsDestinyInventoryItemDefinition - a model defined in Swagger"""  # noqa: E501

        self._display_properties = None
        self._secondary_icon = None
        self._secondary_overlay = None
        self._secondary_special = None
        self._background_color = None
        self._screenshot = None
        self._item_type_display_name = None
        self._ui_item_display_style = None
        self._item_type_and_tier_display_name = None
        self._display_source = None
        self._tooltip_style = None
        self._action = None
        self._inventory = None
        self._set_data = None
        self._stats = None
        self._emblem_objective_hash = None
        self._equipping_block = None
        self._translation_block = None
        self._preview = None
        self._quality = None
        self._value = None
        self._source_data = None
        self._objectives = None
        self._plug = None
        self._gearset = None
        self._sack = None
        self._sockets = None
        self._summary = None
        self._talent_grid = None
        self._investment_stats = None
        self._perks = None
        self._lore_hash = None
        self._summary_item_hash = None
        self._animations = None
        self._allow_actions = None
        self._links = None
        self._does_postmaster_pull_have_side_effects = None
        self._non_transferrable = None
        self._item_category_hashes = None
        self._special_item_type = None
        self._item_type = None
        self._item_sub_type = None
        self._class_type = None
        self._equippable = None
        self._damage_type_hashes = None
        self._damage_types = None
        self._default_damage_type = None
        self._default_damage_type_hash = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if secondary_icon is not None:
            self.secondary_icon = secondary_icon
        if secondary_overlay is not None:
            self.secondary_overlay = secondary_overlay
        if secondary_special is not None:
            self.secondary_special = secondary_special
        if background_color is not None:
            self.background_color = background_color
        if screenshot is not None:
            self.screenshot = screenshot
        if item_type_display_name is not None:
            self.item_type_display_name = item_type_display_name
        if ui_item_display_style is not None:
            self.ui_item_display_style = ui_item_display_style
        if item_type_and_tier_display_name is not None:
            self.item_type_and_tier_display_name = item_type_and_tier_display_name
        if display_source is not None:
            self.display_source = display_source
        if tooltip_style is not None:
            self.tooltip_style = tooltip_style
        if action is not None:
            self.action = action
        if inventory is not None:
            self.inventory = inventory
        if set_data is not None:
            self.set_data = set_data
        if stats is not None:
            self.stats = stats
        if emblem_objective_hash is not None:
            self.emblem_objective_hash = emblem_objective_hash
        if equipping_block is not None:
            self.equipping_block = equipping_block
        if translation_block is not None:
            self.translation_block = translation_block
        if preview is not None:
            self.preview = preview
        if quality is not None:
            self.quality = quality
        if value is not None:
            self.value = value
        if source_data is not None:
            self.source_data = source_data
        if objectives is not None:
            self.objectives = objectives
        if plug is not None:
            self.plug = plug
        if gearset is not None:
            self.gearset = gearset
        if sack is not None:
            self.sack = sack
        if sockets is not None:
            self.sockets = sockets
        if summary is not None:
            self.summary = summary
        if talent_grid is not None:
            self.talent_grid = talent_grid
        if investment_stats is not None:
            self.investment_stats = investment_stats
        if perks is not None:
            self.perks = perks
        if lore_hash is not None:
            self.lore_hash = lore_hash
        if summary_item_hash is not None:
            self.summary_item_hash = summary_item_hash
        if animations is not None:
            self.animations = animations
        if allow_actions is not None:
            self.allow_actions = allow_actions
        if links is not None:
            self.links = links
        if does_postmaster_pull_have_side_effects is not None:
            self.does_postmaster_pull_have_side_effects = does_postmaster_pull_have_side_effects
        if non_transferrable is not None:
            self.non_transferrable = non_transferrable
        if item_category_hashes is not None:
            self.item_category_hashes = item_category_hashes
        if special_item_type is not None:
            self.special_item_type = special_item_type
        if item_type is not None:
            self.item_type = item_type
        if item_sub_type is not None:
            self.item_sub_type = item_sub_type
        if class_type is not None:
            self.class_type = class_type
        if equippable is not None:
            self.equippable = equippable
        if damage_type_hashes is not None:
            self.damage_type_hashes = damage_type_hashes
        if damage_types is not None:
            self.damage_types = damage_types
        if default_damage_type is not None:
            self.default_damage_type = default_damage_type
        if default_damage_type_hash is not None:
            self.default_damage_type_hash = default_damage_type_hash
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501


        :return: The display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def secondary_icon(self):
        """Gets the secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.  # noqa: E501

        :return: The secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._secondary_icon

    @secondary_icon.setter
    def secondary_icon(self, secondary_icon):
        """Sets the secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A secondary icon associated with the item. Currently this is used in very context specific applications, such as Emblem Nameplates.  # noqa: E501

        :param secondary_icon: The secondary_icon of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._secondary_icon = secondary_icon

    @property
    def secondary_overlay(self):
        """Gets the secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        Pulled from the secondary icon, this is the \"secondary background\" of the secondary icon. Confusing? Sure, that's why I call it \"overlay\" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.  # noqa: E501

        :return: The secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._secondary_overlay

    @secondary_overlay.setter
    def secondary_overlay(self, secondary_overlay):
        """Sets the secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Pulled from the secondary icon, this is the \"secondary background\" of the secondary icon. Confusing? Sure, that's why I call it \"overlay\" here: because as far as it's been used thus far, it has been for an optional overlay image. We'll see if that holds up, but at least for now it explains what this image is a bit better.  # noqa: E501

        :param secondary_overlay: The secondary_overlay of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._secondary_overlay = secondary_overlay

    @property
    def secondary_special(self):
        """Gets the secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        Pulled from the Secondary Icon, this is the \"special\" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.  # noqa: E501

        :return: The secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._secondary_special

    @secondary_special.setter
    def secondary_special(self, secondary_special):
        """Sets the secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Pulled from the Secondary Icon, this is the \"special\" background for the item. For Emblems, this is the background image used on the Details view: but it need not be limited to that for other types of items.  # noqa: E501

        :param secondary_special: The secondary_special of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._secondary_special = secondary_special

    @property
    def background_color(self):
        """Gets the background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the \"friends\" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.  # noqa: E501

        :return: The background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._background_color

    @background_color.setter
    def background_color(self, background_color):
        """Sets the background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Sometimes, an item will have a background color. Most notably this occurs with Emblems, who use the Background Color for small character nameplates such as the \"friends\" view you see in-game. There are almost certainly other items that have background color as well, though I have not bothered to investigate what items have it nor what purposes they serve: use it as you will.  # noqa: E501

        :param background_color: The background_color of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._background_color = background_color

    @property
    def screenshot(self):
        """Gets the screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.  # noqa: E501

        :return: The screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._screenshot

    @screenshot.setter
    def screenshot(self, screenshot):
        """Sets the screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If we were able to acquire an in-game screenshot for the item, the path to that screenshot will be returned here. Note that not all items have screenshots: particularly not any non-equippable items.  # noqa: E501

        :param screenshot: The screenshot of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._screenshot = screenshot

    @property
    def item_type_display_name(self):
        """Gets the item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.  # noqa: E501

        :return: The item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._item_type_display_name

    @item_type_display_name.setter
    def item_type_display_name(self, item_type_display_name):
        """Sets the item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The localized title/name of the item's type. This can be whatever the designers want, and has no guarantee of consistency between items.  # noqa: E501

        :param item_type_display_name: The item_type_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._item_type_display_name = item_type_display_name

    @property
    def ui_item_display_style(self):
        """Gets the ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!  # noqa: E501

        :return: The ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._ui_item_display_style

    @ui_item_display_style.setter
    def ui_item_display_style(self, ui_item_display_style):
        """Sets the ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A string identifier that the game's UI uses to determine how the item should be rendered in inventory screens and the like. This could really be anything - at the moment, we don't have the time to really breakdown and maintain all the possible strings this could be, partly because new ones could be added ad hoc. But if you want to use it to dictate your own UI, or look for items with a certain display style, go for it!  # noqa: E501

        :param ui_item_display_style: The ui_item_display_style of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._ui_item_display_style = ui_item_display_style

    @property
    def item_type_and_tier_display_name(self):
        """Gets the item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.  # noqa: E501

        :return: The item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._item_type_and_tier_display_name

    @item_type_and_tier_display_name.setter
    def item_type_and_tier_display_name(self, item_type_and_tier_display_name):
        """Sets the item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.

        It became a common enough pattern in our UI to show Item Type and Tier combined into a single localized string that I'm just going to go ahead and start pre-creating these for items.  # noqa: E501

        :param item_type_and_tier_display_name: The item_type_and_tier_display_name of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._item_type_and_tier_display_name = item_type_and_tier_display_name

    @property
    def display_source(self):
        """Gets the display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.  # noqa: E501

        :return: The display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._display_source

    @display_source.setter
    def display_source(self, display_source):
        """Sets the display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.

        In theory, it is a localized string telling you about how you can find the item. I really wish this was more consistent. Many times, it has nothing. Sometimes, it's instead a more narrative-forward description of the item. Which is cool, and I wish all properties had that data, but it should really be its own property.  # noqa: E501

        :param display_source: The display_source of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._display_source = display_source

    @property
    def tooltip_style(self):
        """Gets the tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).  # noqa: E501

        :return: The tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._tooltip_style

    @tooltip_style.setter
    def tooltip_style(self, tooltip_style):
        """Sets the tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.

        An identifier that the game UI uses to determine what type of tooltip to show for the item. These have no corresponding definitions that BNet can link to: so it'll be up to you to interpret and display your UI differently according to these styles (or ignore it).  # noqa: E501

        :param tooltip_style: The tooltip_style of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: str
        """

        self._tooltip_style = tooltip_style

    @property
    def action(self):
        """Gets the action of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item can be \"used\", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is \"dismantle\". Shocker)  # noqa: E501

        :return: The action of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item can be \"used\", this block will be non-null, and will have data related to the action performed when using the item. (Guess what? 99% of the time, this action is \"dismantle\". Shocker)  # noqa: E501

        :param action: The action of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._action = action

    @property
    def inventory(self):
        """Gets the inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.  # noqa: E501

        :return: The inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can exist in an inventory, this block will be non-null. In practice, every item that currently exists has one of these blocks. But note that it is not necessarily guaranteed.  # noqa: E501

        :param inventory: The inventory of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._inventory = inventory

    @property
    def set_data(self):
        """Gets the set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.  # noqa: E501

        :return: The set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._set_data

    @set_data.setter
    def set_data(self, set_data):
        """Sets the set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is a quest, this block will be non-null. In practice, I wish I had called this the Quest block, but at the time it wasn't clear to me whether it would end up being used for purposes other than quests. It will contain data about the steps in the quest, and mechanics we can use for displaying and tracking the quest.  # noqa: E501

        :param set_data: The set_data of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._set_data = set_data

    @property
    def stats(self):
        """Gets the stats of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.  # noqa: E501

        :return: The stats of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can have stats (such as a weapon, armor, or vehicle), this block will be non-null and populated with the stats found on the item.  # noqa: E501

        :param stats: The stats of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._stats = stats

    @property
    def emblem_objective_hash(self):
        """Gets the emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the \"art channel\". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.  # noqa: E501

        :return: The emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._emblem_objective_hash

    @emblem_objective_hash.setter
    def emblem_objective_hash(self, emblem_objective_hash):
        """Sets the emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item is an emblem that has a special Objective attached to it - for instance, if the emblem tracks PVP Kills, or what-have-you. This is a bit different from, for example, the Vanguard Kill Tracker mod, which pipes data into the \"art channel\". When I get some time, I would like to standardize these so you can get at the values they expose without having to care about what they're being used for and how they are wired up, but for now here's the raw data.  # noqa: E501

        :param emblem_objective_hash: The emblem_objective_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: int
        """

        self._emblem_objective_hash = emblem_objective_hash

    @property
    def equipping_block(self):
        """Gets the equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.  # noqa: E501

        :return: The equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._equipping_block

    @equipping_block.setter
    def equipping_block(self, equipping_block):
        """Sets the equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be equipped, this block will be non-null and will be populated with the conditions under which it can be equipped.  # noqa: E501

        :param equipping_block: The equipping_block of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._equipping_block = equipping_block

    @property
    def translation_block(self):
        """Gets the translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item can be rendered, this block will be non-null and will be populated with rendering information.  # noqa: E501

        :return: The translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._translation_block

    @translation_block.setter
    def translation_block(self, translation_block):
        """Sets the translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be rendered, this block will be non-null and will be populated with rendering information.  # noqa: E501

        :param translation_block: The translation_block of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._translation_block = translation_block

    @property
    def preview(self):
        """Gets the preview of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.  # noqa: E501

        :return: The preview of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can be Used or Acquired to gain other items (for instance, how Eververse Boxes can be consumed to get items from the box), this block will be non-null and will give summary information for the items that can be acquired.  # noqa: E501

        :param preview: The preview of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._preview = preview

    @property
    def quality(self):
        """Gets the quality of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, \"quality\", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.  # noqa: E501

        :return: The quality of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item can have a level or stats, this block will be non-null and will be populated with default quality (item level, \"quality\", and infusion) data. See the block for more details, there's often less upfront information in D2 so you'll want to be aware of how you use quality and item level on the definition level now.  # noqa: E501

        :param quality: The quality of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._quality = quality

    @property
    def value(self):
        """Gets the value of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        The conceptual \"Value\" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.  # noqa: E501

        :return: The value of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The conceptual \"Value\" of an item, if any was defined. See the DestinyItemValueBlockDefinition for more details.  # noqa: E501

        :param value: The value of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def source_data(self):
        """Gets the source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.  # noqa: E501

        :return: The source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._source_data

    @source_data.setter
    def source_data(self, source_data):
        """Sets the source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has a known source, this block will be non-null and populated with source information. Unfortunately, at this time we are not generating sources: that is some aggressively manual work which we didn't have time for, and I'm hoping to get back to at some point in the future.  # noqa: E501

        :param source_data: The source_data of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._source_data = source_data

    @property
    def objectives(self):
        """Gets the objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.  # noqa: E501

        :return: The objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has Objectives (extra tasks that can be accomplished related to the item... most frequently when the item is a Quest Step and the Objectives need to be completed to move on to the next Quest Step), this block will be non-null and the objectives defined herein.  # noqa: E501

        :param objectives: The objectives of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._objectives = objectives

    @property
    def plug(self):
        """Gets the plug of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.  # noqa: E501

        :return: The plug of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._plug

    @plug.setter
    def plug(self, plug):
        """Sets the plug of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item *is* a Plug, this will be non-null and the info defined herein. See DestinyItemPlugDefinition for more information.  # noqa: E501

        :param plug: The plug of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._plug = plug

    @property
    def gearset(self):
        """Gets the gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item has related items in a \"Gear Set\", this will be non-null and the relationships defined herein.  # noqa: E501

        :return: The gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._gearset

    @gearset.setter
    def gearset(self, gearset):
        """Sets the gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has related items in a \"Gear Set\", this will be non-null and the relationships defined herein.  # noqa: E501

        :param gearset: The gearset of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._gearset = gearset

    @property
    def sack(self):
        """Gets the sack of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item is a \"reward sack\" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.  # noqa: E501

        :return: The sack of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._sack

    @sack.setter
    def sack(self, sack):
        """Sets the sack of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item is a \"reward sack\" that can be opened to provide other items, this will be non-null and the properties of the sack contained herein.  # noqa: E501

        :param sack: The sack of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._sack = sack

    @property
    def sockets(self):
        """Gets the sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.  # noqa: E501

        :return: The sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._sockets

    @sockets.setter
    def sockets(self, sockets):
        """Sets the sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this item has any Sockets, this will be non-null and the individual sockets on the item will be defined herein.  # noqa: E501

        :param sockets: The sockets of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._sockets = sockets

    @property
    def summary(self):
        """Gets the summary of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        Summary data about the item.  # noqa: E501

        :return: The summary of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Summary data about the item.  # noqa: E501

        :param summary: The summary of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._summary = summary

    @property
    def talent_grid(self):
        """Gets the talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/\"Build\" items.  # noqa: E501

        :return: The talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._talent_grid

    @talent_grid.setter
    def talent_grid(self, talent_grid):
        """Sets the talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has a Talent Grid, this will be non-null and the properties of the grid defined herein. Note that, while many items still have talent grids, the only ones with meaningful Nodes still on them will be Subclass/\"Build\" items.  # noqa: E501

        :param talent_grid: The talent_grid of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._talent_grid = talent_grid

    @property
    def investment_stats(self):
        """Gets the investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item has stats, this block will be defined. It has the \"raw\" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.  # noqa: E501

        :return: The investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[DestinyDefinitionsDestinyItemInvestmentStatDefinition]
        """
        return self._investment_stats

    @investment_stats.setter
    def investment_stats(self, investment_stats):
        """Sets the investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has stats, this block will be defined. It has the \"raw\" investment stats for the item. These investment stats don't take into account the ways that the items can spawn, nor do they take into account any Stat Group transformations. I have retained them for debugging purposes, but I do not know how useful people will find them.  # noqa: E501

        :param investment_stats: The investment_stats of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[DestinyDefinitionsDestinyItemInvestmentStatDefinition]
        """

        self._investment_stats = investment_stats

    @property
    def perks(self):
        """Gets the perks of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.  # noqa: E501

        :return: The perks of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[DestinyDefinitionsDestinyItemPerkEntryDefinition]
        """
        return self._perks

    @perks.setter
    def perks(self, perks):
        """Sets the perks of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has any *intrinsic* Perks (Perks that it will provide regardless of Sockets, Talent Grid, and other transitory state), they will be defined here.  # noqa: E501

        :param perks: The perks of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[DestinyDefinitionsDestinyItemPerkEntryDefinition]
        """

        self._perks = perks

    @property
    def lore_hash(self):
        """Gets the lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.  # noqa: E501

        :return: The lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._lore_hash

    @lore_hash.setter
    def lore_hash(self, lore_hash):
        """Sets the lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has any related Lore (DestinyLoreDefinition), this will be the hash identifier you can use to look up the lore definition.  # noqa: E501

        :param lore_hash: The lore_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: int
        """

        self._lore_hash = lore_hash

    @property
    def summary_item_hash(self):
        """Gets the summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        There are times when the game will show you a \"summary/vague\" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.  This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.  # noqa: E501

        :return: The summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._summary_item_hash

    @summary_item_hash.setter
    def summary_item_hash(self, summary_item_hash):
        """Sets the summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        There are times when the game will show you a \"summary/vague\" version of an item - such as a description of its type represented as a DestinyInventoryItemDefinition - rather than display the item itself.  This happens sometimes when summarizing possible rewards in a tooltip. This is the item displayed instead, if it exists.  # noqa: E501

        :param summary_item_hash: The summary_item_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: int
        """

        self._summary_item_hash = summary_item_hash

    @property
    def animations(self):
        """Gets the animations of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If any animations were extracted from game content for this item, these will be the definitions of those animations.  # noqa: E501

        :return: The animations of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[DestinyDefinitionsAnimationsDestinyAnimationReference]
        """
        return self._animations

    @animations.setter
    def animations(self, animations):
        """Sets the animations of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If any animations were extracted from game content for this item, these will be the definitions of those animations.  # noqa: E501

        :param animations: The animations of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[DestinyDefinitionsAnimationsDestinyAnimationReference]
        """

        self._animations = animations

    @property
    def allow_actions(self):
        """Gets the allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.  # noqa: E501

        :return: The allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._allow_actions

    @allow_actions.setter
    def allow_actions(self, allow_actions):
        """Sets the allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.

        BNet may forbid the execution of actions on this item via the API. If that is occurring, allowActions will be set to false.  # noqa: E501

        :param allow_actions: The allow_actions of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: bool
        """

        self._allow_actions = allow_actions

    @property
    def links(self):
        """Gets the links of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If we added any help or informational URLs about this item, these will be those links.  # noqa: E501

        :return: The links of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[LinksHyperlinkReference]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If we added any help or informational URLs about this item, these will be those links.  # noqa: E501

        :param links: The links of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[LinksHyperlinkReference]
        """

        self._links = links

    @property
    def does_postmaster_pull_have_side_effects(self):
        """Gets the does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a \"destructive\" action.  It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.  # noqa: E501

        :return: The does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._does_postmaster_pull_have_side_effects

    @does_postmaster_pull_have_side_effects.setter
    def does_postmaster_pull_have_side_effects(self, does_postmaster_pull_have_side_effects):
        """Sets the does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The boolean will indicate to us (and you!) whether something *could* happen when you transfer this item from the Postmaster that might be considered a \"destructive\" action.  It is not feasible currently to tell you (or ourelves!) in a consistent way whether this *will* actually cause a destructive action, so we are playing it safe: if it has the potential to do so, we will not allow it to be transferred from the Postmaster by default. You will need to check for this flag before transferring an item from the Postmaster, or else you'll end up receiving an error.  # noqa: E501

        :param does_postmaster_pull_have_side_effects: The does_postmaster_pull_have_side_effects of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: bool
        """

        self._does_postmaster_pull_have_side_effects = does_postmaster_pull_have_side_effects

    @property
    def non_transferrable(self):
        """Gets the non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        The intrinsic transferability of an item.  I hate that this boolean is negative - but there's a reason.  Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.  # noqa: E501

        :return: The non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._non_transferrable

    @non_transferrable.setter
    def non_transferrable(self, non_transferrable):
        """Sets the non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The intrinsic transferability of an item.  I hate that this boolean is negative - but there's a reason.  Just because an item is intrinsically transferrable doesn't mean that it can be transferred, and we don't want to imply that this is the only source of that transferability.  # noqa: E501

        :param non_transferrable: The non_transferrable of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: bool
        """

        self._non_transferrable = non_transferrable

    @property
    def item_category_hashes(self):
        """Gets the item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        BNet attempts to make a more formal definition of item \"Categories\", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a \"Weapon\", that it's an \"Auto Rifle\", etc...)  The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.  # noqa: E501

        :return: The item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._item_category_hashes

    @item_category_hashes.setter
    def item_category_hashes(self, item_category_hashes):
        """Sets the item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        BNet attempts to make a more formal definition of item \"Categories\", as defined by DestinyItemCategoryDefinition. This is a list of all Categories that we were able to algorithmically determine that this item is a member of. (for instance, that it's a \"Weapon\", that it's an \"Auto Rifle\", etc...)  The algorithm for these is, unfortunately, volatile. If you believe you see a miscategorized item, please let us know on the Bungie API forums.  # noqa: E501

        :param item_category_hashes: The item_category_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[int]
        """

        self._item_category_hashes = item_category_hashes

    @property
    def special_item_type(self):
        """Gets the special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.  # noqa: E501

        :return: The special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._special_item_type

    @special_item_type.setter
    def special_item_type(self, special_item_type):
        """Sets the special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        In Destiny 1, we identified some items as having particular categories that we'd like to know about for various internal logic purposes. These are defined in SpecialItemType, and while these days the itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.  # noqa: E501

        :param special_item_type: The special_item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._special_item_type = special_item_type

    @property
    def item_type(self):
        """Gets the item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        A value indicating the \"base\" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a \"Type\". Still, it's handy in many situations.  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.  # noqa: E501

        :return: The item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A value indicating the \"base\" the of the item. This enum is a useful but dramatic oversimplification of what it means for an item to have a \"Type\". Still, it's handy in many situations.  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.  # noqa: E501

        :param item_type: The item_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._item_type = item_type

    @property
    def item_sub_type(self):
        """Gets the item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        A value indicating the \"sub-type\" of the item. For instance, where an item might have an itemType value \"Weapon\", this will be something more specific like \"Auto Rifle\".  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.  # noqa: E501

        :return: The item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._item_sub_type

    @item_sub_type.setter
    def item_sub_type(self, item_sub_type):
        """Sets the item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        A value indicating the \"sub-type\" of the item. For instance, where an item might have an itemType value \"Weapon\", this will be something more specific like \"Auto Rifle\".  itemCategoryHashes are the preferred way of identifying types, we have retained this enum for its convenience.  # noqa: E501

        :param item_sub_type: The item_sub_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._item_sub_type = item_sub_type

    @property
    def class_type(self):
        """Gets the class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.  If you see a mis-classed item, please inform the developers in the Bungie API forum.  # noqa: E501

        :return: The class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._class_type

    @class_type.setter
    def class_type(self, class_type):
        """Sets the class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        We run a similarly weak-sauce algorithm to try and determine whether an item is restricted to a specific class. If we find it to be restricted in such a way, we set this classType property to match the class' enumeration value so that users can easily identify class restricted items.  If you see a mis-classed item, please inform the developers in the Bungie API forum.  # noqa: E501

        :param class_type: The class_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._class_type = class_type

    @property
    def equippable(self):
        """Gets the equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If true, then you will be allowed to equip the item if you pass its other requirements.  This being false means that you cannot equip the item under any circumstances.  # noqa: E501

        :return: The equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._equippable

    @equippable.setter
    def equippable(self, equippable):
        """Sets the equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If true, then you will be allowed to equip the item if you pass its other requirements.  This being false means that you cannot equip the item under any circumstances.  # noqa: E501

        :param equippable: The equippable of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: bool
        """

        self._equippable = equippable

    @property
    def damage_type_hashes(self):
        """Gets the damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.  # noqa: E501

        :return: The damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[int]
        """
        return self._damage_type_hashes

    @damage_type_hashes.setter
    def damage_type_hashes(self, damage_type_hashes):
        """Sets the damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Theoretically, an item can have many possible damage types. In *practice*, this is not true, but just in case weapons start being made that have multiple (for instance, an item where a socket has reusable plugs for every possible damage type that you can choose from freely), this field will return all of the possible damage types that are available to the weapon by default.  # noqa: E501

        :param damage_type_hashes: The damage_type_hashes of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[int]
        """

        self._damage_type_hashes = damage_type_hashes

    @property
    def damage_types(self):
        """Gets the damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.  This damage type prediction will only use the following to determine potential damage types:  - Intrinsic perks  - Talent Node perks  - Known, reusable plugs for sockets  # noqa: E501

        :return: The damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: list[DestinyDamageType]
        """
        return self._damage_types

    @damage_types.setter
    def damage_types(self, damage_types):
        """Sets the damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.

        This is the list of all damage types that we know ahead of time the item can take on. Unfortunately, this does not preclude the possibility of something funky happening to give the item a damage type that cannot be predicted beforehand: for example, if some designer decides to create arbitrary non-reusable plugs that cause damage type to change.  This damage type prediction will only use the following to determine potential damage types:  - Intrinsic perks  - Talent Node perks  - Known, reusable plugs for sockets  # noqa: E501

        :param damage_types: The damage_types of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: list[DestinyDamageType]
        """

        self._damage_types = damage_types

    @property
    def default_damage_type(self):
        """Gets the default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If the item has a damage type that could be considered to be default, it will be populated here.  For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.  # noqa: E501

        :return: The default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: object
        """
        return self._default_damage_type

    @default_damage_type.setter
    def default_damage_type(self, default_damage_type):
        """Sets the default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If the item has a damage type that could be considered to be default, it will be populated here.  For various upsetting reasons, it's surprisingly cumbersome to figure this out. I hope you're happy.  # noqa: E501

        :param default_damage_type: The default_damage_type of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: object
        """

        self._default_damage_type = default_damage_type

    @property
    def default_damage_type_hash(self):
        """Gets the default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.  I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.  # noqa: E501

        :return: The default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._default_damage_type_hash

    @default_damage_type_hash.setter
    def default_damage_type_hash(self, default_damage_type_hash):
        """Sets the default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        Similar to defaultDamageType, but represented as the hash identifier for a DestinyDamageTypeDefinition.  I will likely regret leaving in the enumeration versions of these properties, but for now they're very convenient.  # noqa: E501

        :param default_damage_type_hash: The default_damage_type_hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: int
        """

        self._default_damage_type_hash = default_damage_type_hash

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyInventoryItemDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyDefinitionsDestinyInventoryItemDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyDefinitionsDestinyInventoryItemDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
