# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_definitions_destiny_vendor_requirement_display_entry_definition import DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition  # noqa: F401,E501


class DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'large_icon': 'str',
        'subtitle': 'str',
        'original_icon': 'str',
        'requirements_display': 'list[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]',
        'description': 'str',
        'name': 'str',
        'icon': 'str',
        'has_icon': 'bool'
    }

    attribute_map = {
        'large_icon': 'largeIcon',
        'subtitle': 'subtitle',
        'original_icon': 'originalIcon',
        'requirements_display': 'requirementsDisplay',
        'description': 'description',
        'name': 'name',
        'icon': 'icon',
        'has_icon': 'hasIcon'
    }

    def __init__(self, large_icon=None, subtitle=None, original_icon=None, requirements_display=None, description=None, name=None, icon=None, has_icon=None):  # noqa: E501
        """DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition - a model defined in Swagger"""  # noqa: E501

        self._large_icon = None
        self._subtitle = None
        self._original_icon = None
        self._requirements_display = None
        self._description = None
        self._name = None
        self._icon = None
        self._has_icon = None
        self.discriminator = None

        if large_icon is not None:
            self.large_icon = large_icon
        if subtitle is not None:
            self.subtitle = subtitle
        if original_icon is not None:
            self.original_icon = original_icon
        if requirements_display is not None:
            self.requirements_display = requirements_display
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if icon is not None:
            self.icon = icon
        if has_icon is not None:
            self.has_icon = has_icon

    @property
    def large_icon(self):
        """Gets the large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.  # noqa: E501

        :return: The large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._large_icon

    @large_icon.setter
    def large_icon(self, large_icon):
        """Sets the large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        I regret calling this a \"large icon\". It's more like a medium-sized image with a picture of the vendor's mug on it, trying their best to look cool. Not what one would call an icon.  # noqa: E501

        :param large_icon: The large_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._large_icon = large_icon

    @property
    def subtitle(self):
        """Gets the subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param subtitle: The subtitle of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._subtitle = subtitle

    @property
    def original_icon(self):
        """Gets the original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.  # noqa: E501

        :return: The original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._original_icon

    @original_icon.setter
    def original_icon(self, original_icon):
        """Sets the original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        If we replaced the icon with something more glitzy, this is the original icon that the vendor had according to the game's content. It may be more lame and/or have less razzle-dazzle. But who am I to tell you which icon to use.  # noqa: E501

        :param original_icon: The original_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._original_icon = original_icon

    @property
    def requirements_display(self):
        """Gets the requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.  # noqa: E501

        :return: The requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: list[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]
        """
        return self._requirements_display

    @requirements_display.setter
    def requirements_display(self, requirements_display):
        """Sets the requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        Vendors, in addition to expected display property data, may also show some \"common requirements\" as statically defined definition data. This might be when a vendor accepts a single type of currency, or when the currency is unique to the vendor and the designers wanted to show that currency when you interact with the vendor.  # noqa: E501

        :param requirements_display: The requirements_display of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: list[DestinyDefinitionsDestinyVendorRequirementDisplayEntryDefinition]
        """

        self._requirements_display = requirements_display

    @property
    def description(self):
        """Gets the description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param description: The description of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param name: The name of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def icon(self):
        """Gets the icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501

        Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  # noqa: E501

        :return: The icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.

        Note that \"icon\" is sometimes misleading, and should be interpreted in the context of the entity. For instance, in Destiny 1 the DestinyRecordBookDefinition's icon was a big picture of a book.  But usually, it will be a small square image that you can use as... well, an icon.  # noqa: E501

        :param icon: The icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def has_icon(self):
        """Gets the has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501


        :return: The has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._has_icon

    @has_icon.setter
    def has_icon(self, has_icon):
        """Sets the has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.


        :param has_icon: The has_icon of this DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition.  # noqa: E501
        :type: bool
        """

        self._has_icon = has_icon

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyDefinitionsDestinyVendorDisplayPropertiesDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
