# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_definitions_common_destiny_display_properties_definition import DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition  # noqa: F401,E501


class DestinyDefinitionsDestinyRaceDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_properties': 'DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition',
        'race_type': 'object',
        'gendered_race_names': 'dict(str, str)',
        'hash': 'int',
        'index': 'int',
        'redacted': 'bool'
    }

    attribute_map = {
        'display_properties': 'displayProperties',
        'race_type': 'raceType',
        'gendered_race_names': 'genderedRaceNames',
        'hash': 'hash',
        'index': 'index',
        'redacted': 'redacted'
    }

    def __init__(self, display_properties=None, race_type=None, gendered_race_names=None, hash=None, index=None, redacted=None):  # noqa: E501
        """DestinyDefinitionsDestinyRaceDefinition - a model defined in Swagger"""  # noqa: E501

        self._display_properties = None
        self._race_type = None
        self._gendered_race_names = None
        self._hash = None
        self._index = None
        self._redacted = None
        self.discriminator = None

        if display_properties is not None:
            self.display_properties = display_properties
        if race_type is not None:
            self.race_type = race_type
        if gendered_race_names is not None:
            self.gendered_race_names = gendered_race_names
        if hash is not None:
            self.hash = hash
        if index is not None:
            self.index = index
        if redacted is not None:
            self.redacted = redacted

    @property
    def display_properties(self):
        """Gets the display_properties of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501


        :return: The display_properties of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :rtype: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """
        return self._display_properties

    @display_properties.setter
    def display_properties(self, display_properties):
        """Sets the display_properties of this DestinyDefinitionsDestinyRaceDefinition.


        :param display_properties: The display_properties of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :type: DestinyDefinitionsCommonDestinyDisplayPropertiesDefinition
        """

        self._display_properties = display_properties

    @property
    def race_type(self):
        """Gets the race_type of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501

        An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.  # noqa: E501

        :return: The race_type of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :rtype: object
        """
        return self._race_type

    @race_type.setter
    def race_type(self, race_type):
        """Sets the race_type of this DestinyDefinitionsDestinyRaceDefinition.

        An enumeration defining the existing, known Races/Species for player characters. This value will be the enum value matching this definition.  # noqa: E501

        :param race_type: The race_type of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :type: object
        """

        self._race_type = race_type

    @property
    def gendered_race_names(self):
        """Gets the gendered_race_names of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501

        A localized string referring to the singular form of the Race's name when referred to in gendered form. Keyed by the DestinyGender.  # noqa: E501

        :return: The gendered_race_names of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._gendered_race_names

    @gendered_race_names.setter
    def gendered_race_names(self, gendered_race_names):
        """Sets the gendered_race_names of this DestinyDefinitionsDestinyRaceDefinition.

        A localized string referring to the singular form of the Race's name when referred to in gendered form. Keyed by the DestinyGender.  # noqa: E501

        :param gendered_race_names: The gendered_race_names of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :type: dict(str, str)
        """

        self._gendered_race_names = gendered_race_names

    @property
    def hash(self):
        """Gets the hash of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :return: The hash of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this DestinyDefinitionsDestinyRaceDefinition.

        The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.  # noqa: E501

        :param hash: The hash of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :type: int
        """

        self._hash = hash

    @property
    def index(self):
        """Gets the index of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :return: The index of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DestinyDefinitionsDestinyRaceDefinition.

        The index of the entity as it was found in the investment tables.  # noqa: E501

        :param index: The index of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def redacted(self):
        """Gets the redacted of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :return: The redacted of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._redacted

    @redacted.setter
    def redacted(self, redacted):
        """Sets the redacted of this DestinyDefinitionsDestinyRaceDefinition.

        If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!  # noqa: E501

        :param redacted: The redacted of this DestinyDefinitionsDestinyRaceDefinition.  # noqa: E501
        :type: bool
        """

        self._redacted = redacted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyDefinitionsDestinyRaceDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
