# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DestinyResponsesDestinyProfileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor_receipts': 'object',
        'profile_inventory': 'object',
        'profile_currencies': 'object',
        'profile': 'object',
        'profile_kiosks': 'object',
        'characters': 'object',
        'character_inventories': 'object',
        'character_progressions': 'object',
        'character_render_data': 'object',
        'character_activities': 'object',
        'character_equipment': 'object',
        'character_kiosks': 'object',
        'item_components': 'object'
    }

    attribute_map = {
        'vendor_receipts': 'vendorReceipts',
        'profile_inventory': 'profileInventory',
        'profile_currencies': 'profileCurrencies',
        'profile': 'profile',
        'profile_kiosks': 'profileKiosks',
        'characters': 'characters',
        'character_inventories': 'characterInventories',
        'character_progressions': 'characterProgressions',
        'character_render_data': 'characterRenderData',
        'character_activities': 'characterActivities',
        'character_equipment': 'characterEquipment',
        'character_kiosks': 'characterKiosks',
        'item_components': 'itemComponents'
    }

    def __init__(self, vendor_receipts=None, profile_inventory=None, profile_currencies=None, profile=None, profile_kiosks=None, characters=None, character_inventories=None, character_progressions=None, character_render_data=None, character_activities=None, character_equipment=None, character_kiosks=None, item_components=None):  # noqa: E501
        """DestinyResponsesDestinyProfileResponse - a model defined in Swagger"""  # noqa: E501

        self._vendor_receipts = None
        self._profile_inventory = None
        self._profile_currencies = None
        self._profile = None
        self._profile_kiosks = None
        self._characters = None
        self._character_inventories = None
        self._character_progressions = None
        self._character_render_data = None
        self._character_activities = None
        self._character_equipment = None
        self._character_kiosks = None
        self._item_components = None
        self.discriminator = None

        if vendor_receipts is not None:
            self.vendor_receipts = vendor_receipts
        if profile_inventory is not None:
            self.profile_inventory = profile_inventory
        if profile_currencies is not None:
            self.profile_currencies = profile_currencies
        if profile is not None:
            self.profile = profile
        if profile_kiosks is not None:
            self.profile_kiosks = profile_kiosks
        if characters is not None:
            self.characters = characters
        if character_inventories is not None:
            self.character_inventories = character_inventories
        if character_progressions is not None:
            self.character_progressions = character_progressions
        if character_render_data is not None:
            self.character_render_data = character_render_data
        if character_activities is not None:
            self.character_activities = character_activities
        if character_equipment is not None:
            self.character_equipment = character_equipment
        if character_kiosks is not None:
            self.character_kiosks = character_kiosks
        if item_components is not None:
            self.item_components = item_components

    @property
    def vendor_receipts(self):
        """Gets the vendor_receipts of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...  COMPONENT TYPE: VendorReceipts  # noqa: E501

        :return: The vendor_receipts of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._vendor_receipts

    @vendor_receipts.setter
    def vendor_receipts(self, vendor_receipts):
        """Sets the vendor_receipts of this DestinyResponsesDestinyProfileResponse.

        Recent, refundable purchases you have made from vendors. When will you use it? Couldn't say...  COMPONENT TYPE: VendorReceipts  # noqa: E501

        :param vendor_receipts: The vendor_receipts of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._vendor_receipts = vendor_receipts

    @property
    def profile_inventory(self):
        """Gets the profile_inventory of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories  # noqa: E501

        :return: The profile_inventory of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._profile_inventory

    @profile_inventory.setter
    def profile_inventory(self, profile_inventory):
        """Sets the profile_inventory of this DestinyResponsesDestinyProfileResponse.

        The profile-level inventory of the Destiny Profile.  COMPONENT TYPE: ProfileInventories  # noqa: E501

        :param profile_inventory: The profile_inventory of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._profile_inventory = profile_inventory

    @property
    def profile_currencies(self):
        """Gets the profile_currencies of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies  # noqa: E501

        :return: The profile_currencies of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._profile_currencies

    @profile_currencies.setter
    def profile_currencies(self, profile_currencies):
        """Sets the profile_currencies of this DestinyResponsesDestinyProfileResponse.

        The profile-level currencies owned by the Destiny Profile.  COMPONENT TYPE: ProfileCurrencies  # noqa: E501

        :param profile_currencies: The profile_currencies of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._profile_currencies = profile_currencies

    @property
    def profile(self):
        """Gets the profile of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        The basic information about the Destiny Profile (formerly \"Account\").  COMPONENT TYPE: Profiles  # noqa: E501

        :return: The profile of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this DestinyResponsesDestinyProfileResponse.

        The basic information about the Destiny Profile (formerly \"Account\").  COMPONENT TYPE: Profiles  # noqa: E501

        :param profile: The profile of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._profile = profile

    @property
    def profile_kiosks(self):
        """Gets the profile_kiosks of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :return: The profile_kiosks of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._profile_kiosks

    @profile_kiosks.setter
    def profile_kiosks(self, profile_kiosks):
        """Sets the profile_kiosks of this DestinyResponsesDestinyProfileResponse.

        Items available from Kiosks that are available Profile-wide (i.e. across all characters)  This component returns information about what Kiosk items are available to you on a *Profile* level. It is theoretically possible for Kiosks to have items gated by specific Character as well. If you ever have those, you will find them on the characterKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :param profile_kiosks: The profile_kiosks of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._profile_kiosks = profile_kiosks

    @property
    def characters(self):
        """Gets the characters of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters  # noqa: E501

        :return: The characters of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this DestinyResponsesDestinyProfileResponse.

        Basic information about each character, keyed by the CharacterId.  COMPONENT TYPE: Characters  # noqa: E501

        :param characters: The characters of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._characters = characters

    @property
    def character_inventories(self):
        """Gets the character_inventories of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        The character-level non-equipped inventory items, keyed by the Character's Id.  COMPONENT TYPE: CharacterInventories  # noqa: E501

        :return: The character_inventories of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._character_inventories

    @character_inventories.setter
    def character_inventories(self, character_inventories):
        """Sets the character_inventories of this DestinyResponsesDestinyProfileResponse.

        The character-level non-equipped inventory items, keyed by the Character's Id.  COMPONENT TYPE: CharacterInventories  # noqa: E501

        :param character_inventories: The character_inventories of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._character_inventories = character_inventories

    @property
    def character_progressions(self):
        """Gets the character_progressions of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Character-level progression data, keyed by the Character's Id.  COMPONENT TYPE: CharacterProgressions  # noqa: E501

        :return: The character_progressions of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._character_progressions

    @character_progressions.setter
    def character_progressions(self, character_progressions):
        """Sets the character_progressions of this DestinyResponsesDestinyProfileResponse.

        Character-level progression data, keyed by the Character's Id.  COMPONENT TYPE: CharacterProgressions  # noqa: E501

        :param character_progressions: The character_progressions of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._character_progressions = character_progressions

    @property
    def character_render_data(self):
        """Gets the character_render_data of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.  COMPONENT TYPE: CharacterRenderData  # noqa: E501

        :return: The character_render_data of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._character_render_data

    @character_render_data.setter
    def character_render_data(self, character_render_data):
        """Sets the character_render_data of this DestinyResponsesDestinyProfileResponse.

        Character rendering data - a minimal set of info needed to render a character in 3D - keyed by the Character's Id.  COMPONENT TYPE: CharacterRenderData  # noqa: E501

        :param character_render_data: The character_render_data of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._character_render_data = character_render_data

    @property
    def character_activities(self):
        """Gets the character_activities of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Character activity data - the activities available to this character and its status, keyed by the Character's Id.  COMPONENT TYPE: CharacterActivities  # noqa: E501

        :return: The character_activities of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._character_activities

    @character_activities.setter
    def character_activities(self, character_activities):
        """Sets the character_activities of this DestinyResponsesDestinyProfileResponse.

        Character activity data - the activities available to this character and its status, keyed by the Character's Id.  COMPONENT TYPE: CharacterActivities  # noqa: E501

        :param character_activities: The character_activities of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._character_activities = character_activities

    @property
    def character_equipment(self):
        """Gets the character_equipment of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        The character's equipped items, keyed by the Character's Id.  COMPONENT TYPE: CharacterEquipment  # noqa: E501

        :return: The character_equipment of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._character_equipment

    @character_equipment.setter
    def character_equipment(self, character_equipment):
        """Sets the character_equipment of this DestinyResponsesDestinyProfileResponse.

        The character's equipped items, keyed by the Character's Id.  COMPONENT TYPE: CharacterEquipment  # noqa: E501

        :param character_equipment: The character_equipment of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._character_equipment = character_equipment

    @property
    def character_kiosks(self):
        """Gets the character_kiosks of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :return: The character_kiosks of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._character_kiosks

    @character_kiosks.setter
    def character_kiosks(self, character_kiosks):
        """Sets the character_kiosks of this DestinyResponsesDestinyProfileResponse.

        Items available from Kiosks that are available to a specific character as opposed to the account as a whole. It must be combined with data from the profileKiosks property to get a full picture of the character's available items to check out of a kiosk.  This component returns information about what Kiosk items are available to you on a *Character* level. Usually, kiosk items will be earned for the entire Profile (all characters) at once. To find those, look in the profileKiosks property.  COMPONENT TYPE: Kiosks  # noqa: E501

        :param character_kiosks: The character_kiosks of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._character_kiosks = character_kiosks

    @property
    def item_components(self):
        """Gets the item_components of this DestinyResponsesDestinyProfileResponse.  # noqa: E501

        Information about instanced items across all returned characters, keyed by the item's instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :return: The item_components of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :rtype: object
        """
        return self._item_components

    @item_components.setter
    def item_components(self, item_components):
        """Sets the item_components of this DestinyResponsesDestinyProfileResponse.

        Information about instanced items across all returned characters, keyed by the item's instance ID.  COMPONENT TYPE: [See inside the DestinyItemComponentSet contract for component types.]  # noqa: E501

        :param item_components: The item_components of this DestinyResponsesDestinyProfileResponse.  # noqa: E501
        :type: object
        """

        self._item_components = item_components

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyResponsesDestinyProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
