# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GroupsV2GroupOptionalConversationEditRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chat_enabled': 'bool',
        'chat_name': 'str',
        'chat_security': 'int'
    }

    attribute_map = {
        'chat_enabled': 'chatEnabled',
        'chat_name': 'chatName',
        'chat_security': 'chatSecurity'
    }

    def __init__(self, chat_enabled=None, chat_name=None, chat_security=None):  # noqa: E501
        """GroupsV2GroupOptionalConversationEditRequest - a model defined in Swagger"""  # noqa: E501

        self._chat_enabled = None
        self._chat_name = None
        self._chat_security = None
        self.discriminator = None

        if chat_enabled is not None:
            self.chat_enabled = chat_enabled
        if chat_name is not None:
            self.chat_name = chat_name
        if chat_security is not None:
            self.chat_security = chat_security

    @property
    def chat_enabled(self):
        """Gets the chat_enabled of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501


        :return: The chat_enabled of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501
        :rtype: bool
        """
        return self._chat_enabled

    @chat_enabled.setter
    def chat_enabled(self, chat_enabled):
        """Sets the chat_enabled of this GroupsV2GroupOptionalConversationEditRequest.


        :param chat_enabled: The chat_enabled of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501
        :type: bool
        """

        self._chat_enabled = chat_enabled

    @property
    def chat_name(self):
        """Gets the chat_name of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501


        :return: The chat_name of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501
        :rtype: str
        """
        return self._chat_name

    @chat_name.setter
    def chat_name(self, chat_name):
        """Sets the chat_name of this GroupsV2GroupOptionalConversationEditRequest.


        :param chat_name: The chat_name of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501
        :type: str
        """

        self._chat_name = chat_name

    @property
    def chat_security(self):
        """Gets the chat_security of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501


        :return: The chat_security of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501
        :rtype: int
        """
        return self._chat_security

    @chat_security.setter
    def chat_security(self, chat_security):
        """Sets the chat_security of this GroupsV2GroupOptionalConversationEditRequest.


        :param chat_security: The chat_security of this GroupsV2GroupOptionalConversationEditRequest.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if chat_security not in allowed_values:
            raise ValueError(
                "Invalid value for `chat_security` ({0}), must be one of {1}"  # noqa: E501
                .format(chat_security, allowed_values)
            )

        self._chat_security = chat_security

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupsV2GroupOptionalConversationEditRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
