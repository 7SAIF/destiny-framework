# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DestinyEntitiesVendorsDestinyVendorCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category_index': 'int',
        'item_indexes': 'list[int]'
    }

    attribute_map = {
        'category_index': 'categoryIndex',
        'item_indexes': 'itemIndexes'
    }

    def __init__(self, category_index=None, item_indexes=None):  # noqa: E501
        """DestinyEntitiesVendorsDestinyVendorCategory - a model defined in Swagger"""  # noqa: E501

        self._category_index = None
        self._item_indexes = None
        self.discriminator = None

        if category_index is not None:
            self.category_index = category_index
        if item_indexes is not None:
            self.item_indexes = item_indexes

    @property
    def category_index(self):
        """Gets the category_index of this DestinyEntitiesVendorsDestinyVendorCategory.  # noqa: E501

        An index into the DestinyVendorDefinition.categories property, so you can grab the display data for this category.  # noqa: E501

        :return: The category_index of this DestinyEntitiesVendorsDestinyVendorCategory.  # noqa: E501
        :rtype: int
        """
        return self._category_index

    @category_index.setter
    def category_index(self, category_index):
        """Sets the category_index of this DestinyEntitiesVendorsDestinyVendorCategory.

        An index into the DestinyVendorDefinition.categories property, so you can grab the display data for this category.  # noqa: E501

        :param category_index: The category_index of this DestinyEntitiesVendorsDestinyVendorCategory.  # noqa: E501
        :type: int
        """

        self._category_index = category_index

    @property
    def item_indexes(self):
        """Gets the item_indexes of this DestinyEntitiesVendorsDestinyVendorCategory.  # noqa: E501

        An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.  # noqa: E501

        :return: The item_indexes of this DestinyEntitiesVendorsDestinyVendorCategory.  # noqa: E501
        :rtype: list[int]
        """
        return self._item_indexes

    @item_indexes.setter
    def item_indexes(self, item_indexes):
        """Sets the item_indexes of this DestinyEntitiesVendorsDestinyVendorCategory.

        An ordered list of indexes into items being sold in this category (DestinyVendorDefinition.itemList) which will contain more information about the items being sold themselves. Can also be used to index into DestinyVendorSaleItemComponent data, if you asked for that data to be returned.  # noqa: E501

        :param item_indexes: The item_indexes of this DestinyEntitiesVendorsDestinyVendorCategory.  # noqa: E501
        :type: list[int]
        """

        self._item_indexes = item_indexes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyEntitiesVendorsDestinyVendorCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
