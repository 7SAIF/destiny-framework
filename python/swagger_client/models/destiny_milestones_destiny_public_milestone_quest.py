# coding: utf-8

"""
    Bungie.Net API

    These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.  # noqa: E501

    OpenAPI spec version: 2.1.1
    Contact: support@bungie.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.destiny_milestones_destiny_public_milestone_challenge import DestinyMilestonesDestinyPublicMilestoneChallenge  # noqa: F401,E501


class DestinyMilestonesDestinyPublicMilestoneQuest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'quest_item_hash': 'int',
        'activity': 'object',
        'challenges': 'list[DestinyMilestonesDestinyPublicMilestoneChallenge]'
    }

    attribute_map = {
        'quest_item_hash': 'questItemHash',
        'activity': 'activity',
        'challenges': 'challenges'
    }

    def __init__(self, quest_item_hash=None, activity=None, challenges=None):  # noqa: E501
        """DestinyMilestonesDestinyPublicMilestoneQuest - a model defined in Swagger"""  # noqa: E501

        self._quest_item_hash = None
        self._activity = None
        self._challenges = None
        self.discriminator = None

        if quest_item_hash is not None:
            self.quest_item_hash = quest_item_hash
        if activity is not None:
            self.activity = activity
        if challenges is not None:
            self.challenges = challenges

    @property
    def quest_item_hash(self):
        """Gets the quest_item_hash of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501

        Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.  # noqa: E501

        :return: The quest_item_hash of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501
        :rtype: int
        """
        return self._quest_item_hash

    @quest_item_hash.setter
    def quest_item_hash(self, quest_item_hash):
        """Sets the quest_item_hash of this DestinyMilestonesDestinyPublicMilestoneQuest.

        Quests are defined as Items in content. As such, this is the hash identifier of the DestinyInventoryItemDefinition that represents this quest. It will have pointers to all of the steps in the quest, and display information for the quest (title, description, icon etc) Individual steps will be referred to in the Quest item's DestinyInventoryItemDefinition.setData property, and themselves are Items with their own renderable data.  # noqa: E501

        :param quest_item_hash: The quest_item_hash of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501
        :type: int
        """

        self._quest_item_hash = quest_item_hash

    @property
    def activity(self):
        """Gets the activity of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501

        A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.  # noqa: E501

        :return: The activity of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501
        :rtype: object
        """
        return self._activity

    @activity.setter
    def activity(self, activity):
        """Sets the activity of this DestinyMilestonesDestinyPublicMilestoneQuest.

        A milestone need not have an active activity, but if there is one it will be returned here, along with any variant and additional information.  # noqa: E501

        :param activity: The activity of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501
        :type: object
        """

        self._activity = activity

    @property
    def challenges(self):
        """Gets the challenges of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501

        For the given quest there could be 0-to-Many challenges: mini quests that you can perform in the course of doing this quest, that may grant you rewards and benefits.  # noqa: E501

        :return: The challenges of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501
        :rtype: list[DestinyMilestonesDestinyPublicMilestoneChallenge]
        """
        return self._challenges

    @challenges.setter
    def challenges(self, challenges):
        """Sets the challenges of this DestinyMilestonesDestinyPublicMilestoneQuest.

        For the given quest there could be 0-to-Many challenges: mini quests that you can perform in the course of doing this quest, that may grant you rewards and benefits.  # noqa: E501

        :param challenges: The challenges of this DestinyMilestonesDestinyPublicMilestoneQuest.  # noqa: E501
        :type: list[DestinyMilestonesDestinyPublicMilestoneChallenge]
        """

        self._challenges = challenges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DestinyMilestonesDestinyPublicMilestoneQuest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
